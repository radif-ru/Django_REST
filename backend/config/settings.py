"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from Metaclases import IterAttrValues

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Секретный ключ из настроек переменных окружения, иначе иначе из default
SECRET_KEY = os.environ.get('SECRET_KEY', default='yp@cq+i8hq^nta7i_)a-')

# SECURITY WARNING: don't run with debug turned on in production!
# Режим дебага из настроек переменных окружения, иначе из default
DEBUG = int(os.environ.get('DEBUG', default=1))

# Разрешённые хосты из настроек переменных окружения, иначе из default
ALLOWED_HOSTS = os.environ.get(
    'DJANGO_ALLOWED_HOSTS', default='localhost 127.0.0.1 [::1] web').split(' ')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    # Авторизация по Токену
    'rest_framework.authtoken',
    # Настройка политики CORS. Работа с заголовками для доступа React к Django
    'corsheaders',
    # Библиотека для фильтрации запросов
    'django_filters',
    # Библиотека JSON Web Token
    'rest_framework_simplejwt',
    # Библиотека для документирование API
    'drf_yasg',
    # GraphQL
    'graphene_django',

    # Свои приложения
    'users.apps.UsersConfig',
    'projects.apps.ProjectsConfig',
    'todos.apps.TodosConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Настройка политики CORS. Работа с заголовками для доступа React к Django
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# Настройка политики CORS - доступ с другого домена/порта
# Работа с заголовками для доступа React к Django, разрешенные адреса
# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    # 'http://0.0.0.0:3000',
    'http://192.168.56.1:3000'
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # Добавление шаблонов из корневой директории templates
            os.path.join(BASE_DIR, 'templates')
        ],
        # Поиск шаблонов будет вестись по установленным приложениям (APP_DIRS):
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Подключение бд из настроек переменных окружения (PostgreSQL),
# иначе из default (sqlite3)
DATABASES = {
    'default': {
        'ENGINE': os.environ.get(
            'SQL_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': os.environ.get(
            'SQL_DATABASE', default=os.path.join(BASE_DIR, 'db.sqlite3')),
        'USER': os.environ.get('SQL_USER', default='user'),
        'PASSWORD': os.environ.get('SQL_PASSWORD', default='password'),
        'HOST': os.environ.get('SQL_HOST', default='localhost'),
        'PORT': os.environ.get('SQL_PORT', default='5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_URL = '/mediafiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Пользовательская модель авторизации:
AUTH_USER_MODEL = 'users.User'

# Endpoints (конечные точки):
USERS_ENDPOINT = '/api/users/'
PROJECTS_ENDPOINT = '/api/projects/'
TODOS_ENDPOINT = '/api/todos/'

LOGIN_REDIRECT_URL = '/'

# Настройки почты для тестирования:
DOMAIN_NAME = 'http://localhost:3333'

USER_EXPIRES_TIMEDELTA = timedelta(hours=48)

EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = os.environ.get('EMAIL_PORT', '25')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'mail@radif.ru')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'qwertytrewq')
EMAIL_USE_SSL = int(os.environ.get('EMAIL_USE_SSL', default=0))

SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# вариант логирования сообщений почты в виде файлов вместо отправки
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = 'tmp/email-messages/'


# консольная отправка сообщений
# python -m smtpd -n -c DebuggingServer localhost:25
# EMAIL_HOST_USER, EMAIL_HOST_PASSWORD = None, None
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Роли пользователей
class Roles(metaclass=IterAttrValues):
    ADMINISTRATOR = 'администратор'
    DEVELOPER = 'разработчик'
    PROJECT_OWNER = 'владелец проекта'


JSON_PATH = 'json'

# Глобальные настройки DRF
# Каждые из них можно настроить индивидуально - приоритет будет выше!:
REST_FRAMEWORK = {
    # Настройки рендеринга
    'DEFAULT_RENDERER_CLASSES': [
        # Верблюжий стиль для отображения JSON и браузерного API
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
        # 'rest_framework.renderers.JSONRenderer',
    ],
    # Настройки парсеров
    'DEFAULT_PARSER_CLASSES': (
        # If you use MultiPartFormParser or FormParser,
        # we also have a camel case version
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        # Any other parsers
    ),
    # Библиотека для фильтрации запросов
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'],
    # Настройки пагинации
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    # Права по умолчанию для всего проекта
    'DEFAULT_PERMISSION_CLASSES': [
        # Анонимные пользователи могут читать любые данные,
        # остальные права зависят от групп и кастомных настроек
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],
    # Методы авторизации для всего проекта
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Аутентификация с помощью JSON токенов JWT. Наиболее безопасная
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

    # Настройка системы версий API
    # Во views необходимо обрабатывать self.request.version

    # Необходимо в config/urls.py раскомментить строку подстановки версий
    # Гибкий способ
    # http://127.0.0.1:3333/api/1.0/projects/
    # http://127.0.0.1:3333/api/2.0/projects/
    # 'DEFAULT_VERSIONING_CLASS':
    # 'rest_framework.versioning.URLPathVersioning',

    # Примерно то же, что и выше, в config/urls.py указано
    # http://127.0.0.1:3333/api/projects/1.0/
    # http://127.0.0.1:3333/api/projects/2.0/
    # 'DEFAULT_VERSIONING_CLASS':
    #     'rest_framework.versioning.NamespaceVersioning',

    # Система версий по параметрам. Не требует дополнительных манипуляций в
    # urls.py, работает сразу
    # http://127.0.0.1:3333/api/projects/?version=1.0/
    # http://127.0.0.1:3333/api/projects/?version=2.0/
    # 'DEFAULT_VERSIONING_CLASS':
    #     'rest_framework.versioning.QueryParameterVersioning',

    # Передача версий внутри заголовков. Url-адрес не меняется.
    # Необходимо в Headers добавить поле Accept и в нём указать, например: \
    # application/json; version=2.0
    # Протестировать можно с помощью гибкого браузера Mozilla Firefox, Postman,
    # серверной библиотеки requests, клиентской библиотеки axios и т.д.
    'DEFAULT_VERSIONING_CLASS':
        'rest_framework.versioning.AcceptHeaderVersioning',

    # Система версий по имени хоста
    # https://v1.radif.ru/api/projects/
    # https://v2.radif.ru/api/projects/
    # 'DEFAULT_VERSIONING_CLASS':
    #     'rest_framework.versioning.HostNameVersioning,
}

# Настройка JSON Web Token (JWT)
SIMPLE_JWT = {
    # Срок действия исходного токена
    'ACCESS_TOKEN_LIFETIME': timedelta(days=22),
    # Как долго действительны токены обновления
    'REFRESH_TOKEN_LIFETIME': timedelta(days=33),
    # Если установлено значение True, при отправке маркера обновления в
    # TokenRefreshView, новый маркер обновления будет возвращен вместе
    # с новым маркером доступа.
    'ROTATE_REFRESH_TOKENS': False,
    # True, приводит к тому, что маркеры обновления, отправленные
    # TokenRefreshView в черный список, будут добавлены в черный список
    'BLACKLIST_AFTER_ROTATION': False,
    # Обновление последнего входа в БД. Нагружает систему
    'UPDATE_LAST_LOGIN': False,

    # Алгоритм из библиотеки PyJWT, который будет использоваться для
    # выполнения операций подписи/проверки токенов. ('HS256', 'HS384', 'HS512')
    'ALGORITHM': 'HS256',
    # Ключ подписи сгенерированных токенов
    'SIGNING_KEY': SECRET_KEY,
    # Проверочный ключ, который используется для проверки содержимого
    # сгенерированных токенов
    'VERIFYING_KEY': None,
    # Аудитория утверждает, что она включена в сгенерированные токены и/или
    # проверена в декодированных токенах
    'AUDIENCE': None,
    # Эмитент утверждает, что он включен в сгенерированные токены и/или
    # проверен в декодированных токенах
    'ISSUER': None,
    # JWK_URL используется для динамического разрешения открытых ключей,
    # необходимых для проверки подписи токенов.
    'JWK_URL': None,
    # Свобода действий используется для того, чтобы дать некоторый запас
    # времени истечения срока действия
    'LEEWAY': 0,

    # Префикс токена, используемый клиентом в заголовке по умолчания
    # 'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_TYPES': ('Bear R@d1f', 'Hare Wolf'),
    # Имя заголовка авторизации, по умолчанию - Authorization
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    # Например код ниже будет использовать имя заголовка - X_Access_Token
    # 'AUTH_HEADER_NAME': 'HTTP_X_ACCESS_TOKEN',
    # Поле базы данных из модели пользователя, которое будет включено в
    # сгенерированные маркеры для идентификации пользователей.
    'USER_ID_FIELD': 'id',
    # 'user_id' будет означать, что сгенерированные токены включают
    # утверждение 'user_id', содержащее идентификатор пользователя.
    'USER_ID_CLAIM': 'user_id',
    # Вызывается для определения того, разрешено ли пользователю проходить
    # аутентификацию. Проверяет, что флаг is_active True, иначе 401 ошибка
    'USER_AUTHENTICATION_RULE':
        'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    # Список точечных путей к классам, указывающих типы токенов,
    # которым разрешено подтверждать аутентификацию.
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    # Имя утверждения, используемое для хранения типа токена
    'TOKEN_TYPE_CLAIM': 'token_type',

    # Имя утверждения, используемое для хранения уникального идентификатора
    # токена. Используется для идентификации отозванных токенов в приложении
    # 'Черный список'.
    'JTI_CLAIM': 'jti',

    # Имя утверждения, используемое для хранения времени истечения периода
    # обновления скользящего маркера.
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    # Объект, который определяет, как долго скользящие токены действительны
    # для подтверждения аутентификации.
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    # Объект, который определяет, как долго будут действительны скользящие
    # маркеры для обновления.
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Настройки для GraphQK
GRAPHENE = {
    'SCHEMA': 'config.schema.schema',
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].extend([
        # API в браузере
        'rest_framework.renderers.BrowsableAPIRenderer',
        # Стиль удобного администрирования в браузере
        'rest_framework.renderers.AdminRenderer',
    ])
    # Методы авторизации для всего проекта
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'].extend([
        # Базовая аутентификация Django REST по HTTP. Не безопасно!
        # 'rest_framework.authentication.BasicAuthentication',
        # Аутентификация Django REST, позволяет хранить сессии для работы в
        # браузере с API
        'rest_framework.authentication.SessionAuthentication',
        # Аутентификация Django REST с помощью токенов
        # 'rest_framework.authentication.TokenAuthentication',
    ])
    # Логирование
    # LOGGING = {
    #     'version': 1,
    #     'disable_existing_loggers': False,
    #     'handlers': {
    #         'console': {
    #             'class': 'logging.StreamHandler',
    #         },
    #     },
    #     # Вывод запросов к бд в консоль
    #     'loggers': {
    #         'django.db.backends': {
    #             'level': 'DEBUG',
    #             'handlers': ['console'],
    #         },
    #     },
    # }

# Затирание переменных локальными настройками (если есть):
try:
    from .local_settings import *
except ImportError or ModuleNotFoundError:
    pass
