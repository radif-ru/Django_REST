{"version":3,"sources":["reportWebVitals.js","components/Header/Header.js","components/Users/UserItem.js","components/Users/UsersList.js","components/Users/Users.js","components/Projects/ProjectItem.js","components/Projects/ProjectsList.js","components/Projects/Projects.js","components/Todos/TodoItem.js","components/Todos/TodosList.js","components/Todos/Todos.js","components/Footer/logo.svg","components/Footer/Footer.js","components/NotFound404/NotFound404.js","components/Todos/TodoForm.js","components/Todos/TodosData.js","components/Projects/ProjectForm.js","components/Projects/ProjectData.js","components/Users/UserForm.js","components/Users/UserData.js","components/Users/UserPage.js","components/Projects/ProjectPage.js","components/Authorization/Authorization.js","GeneralApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Menu","props","isAuthenticated","logout","login","user","users","find","username","className","to","id","onClick","Header","this","PureComponent","UserItem","roles","firstName","lastName","middleName","email","birthdate","dateFormat","map","roleId","idx","role","UsersList","Users","ProjectItem","project","deleteProject","admin","name","target","rel","href","repository","userId","el","ProjectsList","projects","Projects","TodoItem","todo","deleteTodo","text","created","updated","TodosList","todos","Todos","Footer","src","logo","alt","NotFound404","currentPage","window","location","TodoForm","state","event","value","setState","createTodo","editTodo","toggleDetails","projectId","alert","preventDefault","onSubmit","handleSubmit","required","maxLength","placeholder","onChange","handleChange","defaultValue","hidden","item","type","TodosData","TodosDataEl","newToggleState","visible","ProjectForm","selectedOptions","usersId","i","length","push","createProject","editProject","allUsersId","data","otherUsers","filter","multiple","ProjectData","noData","UserForm","setNotification","getNotification","a","password","confirmPassword","createUser","editUser","autoComplete","minLength","size","pattern","min","max","UserData","dateJoined","lastLogin","UserPage","useParams","userTodos","userProjects","projUser","ProjectPage","projectTodos","LoginForm","auth","React","Component","GeneralApp","getToken","cookies","Cookies","token","get","getAllData","headers","adminRole","domain","tokenEndpoint","axios","post","response","setToken","catch","error","console","log","set","path","getRolesDataSetREST","getRolesDataSetGraphQL","rolesEndpoint","limit","offset","getDataREST","graphQLEndpoint","getDataGraphQL","usersEndpoint","todosEndpoint","projectsEndpoint","createDataREST","projectOwnerRole","authUser","newUser","Object","keys","objectKey","index","Date","editDataREST","newProject","newTodo","deleteDataREST","endpoint","getHeaders","results","setAllData","handleErrors","queryGraphQL","query","rolesSet","allRoles","roleUsers","reduce","arr1","arr2","rolesArr","usersArr","usersSet","Set","rest","sort","b","uniqueProjectsIds","isAdmin","patch","delete","message","indexOf","request","status","notification","exact","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37655a75.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import \"./Header.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n/**\r\n * Отображение меню, кнопок для пользователей - личный кабинет, войти, выйти -\r\n * в зависимости от авторизации\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst Menu = (props) => {\r\n\r\n  const {isAuthenticated, logout, login, users} = props;\r\n  // Авторизованный пользователь\r\n  const user = users.find(user => user.username === login)\r\n\r\n  return (\r\n    <nav className=\"menu\">\r\n      <ul>\r\n        <li>\r\n          <Link className=\"menu-link\" to=\"/users\">Пользователи</Link>\r\n        </li>\r\n        <li>\r\n          <Link className=\"menu-link\" to=\"/projects\">Проекты</Link>\r\n        </li>\r\n        <li>\r\n          <Link className=\"menu-link\" to=\"/todos\">Заметки</Link>\r\n        </li>\r\n        {isAuthenticated() && user &&\r\n        <li>\r\n          <Link\r\n            className=\"menu-link\"\r\n            to={`/users/${user.id}`}\r\n          >\r\n            ЛК | {login}\r\n          </Link>\r\n        </li>\r\n        }\r\n        {isAuthenticated()\r\n          ? <li>\r\n            <span className=\"menu-link menu-logout\" onClick={() => logout()}>\r\n              Выйти\r\n            </span>\r\n          </li>\r\n          : <li>\r\n            <Link className=\"menu-link menu-login\" to=\"/login\">Войти</Link>\r\n          </li>\r\n        }\r\n\r\n        {!isAuthenticated() &&\r\n        <li>\r\n          <Link className=\"menu-link menu-login\" to=\"/registration\">\r\n            Регистрация\r\n          </Link>\r\n        </li>\r\n        }\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\n/**\r\n * Работа с заголовком страницы\r\n */\r\nexport class Header extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {isAuthenticated, logout, login, users} = this.props;\r\n\r\n    return (\r\n      <header className=\"header\">\r\n        <Menu\r\n          isAuthenticated={isAuthenticated}\r\n          logout={logout}\r\n          login={login}\r\n          users={users}\r\n        />\r\n      </header>\r\n    )\r\n  }\r\n}\r\n","import {PureComponent} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport dateFormat from \"dateformat\";\r\n\r\n\r\n/**\r\n * Заполнение ячеек пользователей\r\n */\r\nexport class UserItem extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {user, roles} = this.props;\r\n\r\n    return (\r\n      <tr>\r\n        <td>\r\n          <Link to={`/users/${user.id}`}>{user.username}</Link>\r\n        </td>\r\n        <td>\r\n          {user.firstName}\r\n        </td>\r\n        <td>\r\n          {user.lastName}\r\n        </td>\r\n        <td>\r\n          {user.middleName}\r\n        </td>\r\n        <td>\r\n          {user.email}\r\n        </td>\r\n        <td>\r\n          {user.birthdate && dateFormat(user.birthdate, \"fullDate\")}\r\n        </td>\r\n        <td>\r\n          {user.roles.map(\r\n           (roleId, idx) =>\r\n             <span key={idx}>\r\n               {roles.find(role => role.id === roleId).role}\r\n               <br/>\r\n             </span>\r\n          )}\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}","import {PureComponent} from \"react\";\r\nimport {UserItem} from \"./UserItem\";\r\n\r\n\r\n/**\r\n * Формирование заголовков таблицы и данных для заполнения ячеек\r\n */\r\nexport class UsersList extends PureComponent {\r\n\r\n  render() {\r\n    const {users, roles} = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <h3>Пользователи</h3>\r\n        <table className=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>\r\n              Login\r\n            </th>\r\n            <th>\r\n              Имя\r\n            </th>\r\n            <th>\r\n              Фамилия\r\n            </th>\r\n            <th>\r\n              Отчество\r\n            </th>\r\n            <th>\r\n              Email\r\n            </th>\r\n            <th>\r\n              Дата рождения\r\n            </th>\r\n            <th>\r\n              Роли\r\n            </th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {users.map((user, idx) =>\r\n            <UserItem key={idx} user={user} roles={roles}/>\r\n          )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Users.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport {UsersList} from \"./UsersList\";\r\n\r\n\r\n/**\r\n * Работа с пользователями\r\n */\r\nexport class Users extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {users, roles} = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <UsersList users={users} roles={roles}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import {Link} from \"react-router-dom\";\r\n\r\n\r\n/**\r\n * Заполнение ячеек проектов, формирование авторов для каждого проекта\r\n * @param props {object} - Данные, переданные родителем\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport const ProjectItem = (props) => {\r\n\r\n  const {project, users, deleteProject, isAuthenticated, login, admin} = props;\r\n  const user = users.find(user => user.username === login);\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <Link to={`/projects/${project.id}`}>{project.name}</Link>\r\n      </td>\r\n      <td>\r\n        <a target=\"_blank\" rel=\"noreferrer\" href={project.repository}>\r\n          {project.repository}\r\n        </a>\r\n      </td>\r\n      <td>\r\n        {project.users.map((userId, idx) => <span key={idx}>\r\n          <Link to={`/users/${userId}`}>\r\n            {users.find(user => user.id === userId).username}\r\n          </Link><br/>\r\n        </span>)}\r\n      </td>\r\n      {isAuthenticated() && (project.users.find(el => el === user.id) || admin) &&\r\n      <td className=\"btn btn-outline-danger\">\r\n        <div onClick={() => deleteProject(project.id)}>Del</div>\r\n      </td>\r\n      }\r\n    </tr>\r\n  )\r\n}\r\n","import {PureComponent} from \"react\";\r\n\r\nimport {ProjectItem} from \"./ProjectItem\";\r\n\r\n/**\r\n * Формирование заголовков таблицы и данных для заполнения ячеек\r\n */\r\nexport class ProjectsList extends PureComponent {\r\n\r\n  render() {\r\n    const {\r\n      projects, users, deleteProject, login, isAuthenticated, admin\r\n    } = this.props\r\n\r\n    return (\r\n      <div>\r\n        <h3>Projects</h3>\r\n        <table className=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>\r\n              Имя\r\n            </th>\r\n            <th>\r\n              Репозиторий\r\n            </th>\r\n            <th>\r\n              Авторы\r\n            </th>\r\n            {isAuthenticated() && <th> </th>}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {projects.map((project, idx) =>\r\n            <ProjectItem\r\n              key={idx}\r\n              project={project}\r\n              users={users}\r\n              login={login}\r\n              isAuthenticated={isAuthenticated}\r\n              deleteProject={deleteProject}\r\n              admin={admin}\r\n            />\r\n          )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}","import \"./Projects.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport {ProjectsList} from \"./ProjectsList\";\r\n\r\n\r\n/**\r\n * Работа с проектами\r\n */\r\nexport class Projects extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {\r\n      users, projects, deleteProject, isAuthenticated, login, admin\r\n    } = this.props\r\n\r\n    return (\r\n      <ProjectsList\r\n        users={users}\r\n        projects={projects}\r\n        deleteProject={deleteProject}\r\n        isAuthenticated={isAuthenticated}\r\n        login={login}\r\n        admin={admin}\r\n      />\r\n    )\r\n  }\r\n}\r\n","import {PureComponent} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport dateFormat from \"dateformat\";\r\n\r\n\r\n/**\r\n * Формирование данных. Заполнение ячеек заметок\r\n * По заметке определяются пользователь и проект, кому она принадлежит\r\n * У авторизованных пользователей есть возможность удалять заметки,\r\n * но только свои\r\n */\r\nexport class TodoItem extends PureComponent {\r\n\r\n  render() {\r\n    const {\r\n      todo, users, projects, deleteTodo, isAuthenticated, login, admin\r\n    } = this.props;\r\n    const user = users.find(user => user.id === todo.user);\r\n    const project = projects.find(project => project.id === todo.project);\r\n\r\n    return (\r\n      <tr>\r\n        <td>\r\n          {todo.text}\r\n        </td>\r\n        <td>\r\n          <Link to={`/users/${user.id}`}>{user.username}</Link>\r\n        </td>\r\n        <td>\r\n          <Link to={`/projects/${todo.project}`}>{project.name}</Link>\r\n        </td>\r\n        <td>\r\n          {dateFormat(todo.created, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}\r\n        </td>\r\n        <td>\r\n          {todo.updated !== todo.created\r\n            ? `${dateFormat(\r\n              todo.updated, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}`\r\n            : \"---\"\r\n          }\r\n        </td>\r\n        {isAuthenticated() && (user.username === login || admin) &&\r\n        <td className=\"btn btn-outline-danger\">\r\n          <div onClick={() => deleteTodo(todo.id)}>Del</div>\r\n        </td>\r\n        }\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n","import {PureComponent} from \"react\";\r\n\r\nimport {TodoItem} from \"./TodoItem\";\r\n\r\n/**\r\n * Формирование заголовков таблицы и данных для заполнения ячеек\r\n * Для авторизованных появляется поле удаления заметки, но кнопка удаления\r\n * отображается только у владельцев заметок\r\n */\r\nexport class TodosList extends PureComponent {\r\n\r\n  render() {\r\n    const {\r\n      users, projects, todos, deleteTodo, isAuthenticated, login, admin\r\n    } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <h3>Todos</h3>\r\n        <table className=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>\r\n              Текст\r\n            </th>\r\n            <th>\r\n              Автор\r\n            </th>\r\n            <th>\r\n              Проект\r\n            </th>\r\n            <th>\r\n              Добавлена\r\n            </th>\r\n            <th>\r\n              Обновлена\r\n            </th>\r\n            {isAuthenticated() && <th> </th>}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {todos.map((todo, idx) =>\r\n            <TodoItem\r\n              key={idx}\r\n              todo={todo}\r\n              users={users}\r\n              projects={projects}\r\n              deleteTodo={deleteTodo}\r\n              isAuthenticated={isAuthenticated}\r\n              login={login}\r\n              admin={admin}\r\n            />\r\n          )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Todos.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport {TodosList} from \"./TodosList\";\r\n\r\n\r\n/**\r\n * Работа с заметками\r\n */\r\nexport class Todos extends PureComponent {\r\n\r\n  render() {\r\n    const {\r\n      users, projects, todos, deleteTodo, isAuthenticated, login, admin\r\n    } = this.props;\r\n\r\n    return (\r\n      <TodosList\r\n        users={users}\r\n        projects={projects}\r\n        todos={todos}\r\n        deleteTodo={deleteTodo}\r\n        isAuthenticated={isAuthenticated}\r\n        login={login}\r\n        admin={admin}\r\n      />\r\n    )\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import \"./Footer.css\"\r\nimport logo from \"./logo.svg\";\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\n\r\n/**\r\n * Формирование нижней части страницы\r\n */\r\nexport class Footer extends PureComponent {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <footer className=\"footer\">\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://radif.ru\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          &copy; 2021 &reg;Radif.ru\r\n        </a>\r\n        <br/>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import \"./NotFound404.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\n\r\n/**\r\n * Обработка переходов на несуществующие страницы\r\n */\r\nexport class NotFound404 extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const currentPage = window.location.href;\r\n\r\n    return (\r\n      <div>\r\n        <h2>Данная страница недоступна! </h2>\r\n        <p>Неправильный путь: <b>{currentPage}</b></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Todos.css\"\r\n\r\nimport {PureComponent} from \"react\";\r\n\r\n/**\r\n * Создание и обработка формы создания заметки\r\n */\r\nexport class TodoForm extends PureComponent {\r\n  /**\r\n   * Прокидывание свойств (props) от родителя, начальное состояние текста\r\n   * @param props {object} Данные, переданные родителем\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"text\": this.props.text,\r\n      \"projectId\": \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события изменения поля ввода формы\r\n   * @param event {object} Событие, оттуда извлекаются имя и значения текста\r\n   */\r\n  handleChange(event) {\r\n    const {name, value} = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события обработки отправки данных в форме\r\n   * Создание или редактирование данных в зависимости от переданных свойств.\r\n   * Валидация данных.\r\n   * @param event {object} Используется только для остановки события\r\n   */\r\n  handleSubmit(event) {\r\n    const {text} = this.state;\r\n    const {\r\n      users, login, createTodo, editTodo, todo, toggleDetails, todos\r\n    } = this.props;\r\n\r\n    const projectId = this.props.projectId\r\n      ? this.props.projectId\r\n      : this.state.projectId\r\n\r\n    const user = users && users.find(user => user.username === login);\r\n\r\n    if (todos.find(todo =>\r\n      todo.text === text && todo.project === projectId && todo.user === user.id\r\n    )) {\r\n      alert(\"Запрещено одному и тому же пользователю оставлять 2 одинаковые \" +\r\n        \"заметки к одному проекту! Отредактируйте текст\");\r\n      event.preventDefault();\r\n      return\r\n    }\r\n\r\n    if (editTodo) {\r\n      const data = {\r\n        \"text\": text\r\n      }\r\n      editTodo(data, todo.id);\r\n      toggleDetails();\r\n      event.preventDefault();\r\n      return\r\n    }\r\n\r\n    const data = {\r\n      \"project\": +projectId,\r\n      \"user\": +user.id,\r\n      \"text\": text\r\n    }\r\n    createTodo(data);\r\n    this.setState({\r\n      \"text\": \"\",\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * При передаче свойства projects, формируется список проектов, появляется\r\n   * возможность выбора проекта, к которому оставляется заметка.\r\n   * Вызов методов this.handleChange и this.handleSubmit при событиях изменения\r\n   * поля ввода и отправки данных соответственно\r\n   * @returns {JSX.Element}\r\n   */\r\n  render() {\r\n    const {text} = this.state;\r\n    const {projects} = this.props\r\n\r\n    return (\r\n      <div>\r\n        <form\r\n          onSubmit={(event => this.handleSubmit(event))}\r\n          className=\"row todo-form\"\r\n        >\r\n          <div className=\"col-5\">\r\n          <textarea\r\n            required\r\n            maxLength=\"333\"\r\n            name=\"text\"\r\n            placeholder=\"Текст\"\r\n            aria-describedby=\"textHelpInline\"\r\n            value={text}\r\n            className=\"form-control todos__form-text-area\"\r\n            onChange={(event => this.handleChange(event))}\r\n          />\r\n            <span id=\"textHelpInline\" className=\"form-text\">\r\n            Введите текст вашей заметки к проекту\r\n          </span>\r\n          </div>\r\n          {projects &&\r\n          <div className=\"col-3\">\r\n            <select\r\n              required\r\n              name=\"projectId\"\r\n              className=\"form-control form-select todos__form-select\"\r\n              aria-describedby=\"textHelpSelect\"\r\n              placeholder=\"Проекты\"\r\n              onChange={(event) =>\r\n                this.handleChange(event)\r\n              }\r\n            >\r\n              <option value=\"\" defaultValue=\"\" hidden>Список проектов</option>\r\n              {projects.map((item, idx) =>\r\n                <option value={item.id} key={idx}>\r\n                  {item.name}\r\n                </option>)\r\n              }\r\n            </select>\r\n            <span id=\"textHelpSelect\" className=\"form-text\">\r\n                Выберете проект, к которому хотите оставить заметку\r\n              </span>\r\n          </div>\r\n          }\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Сохранить\"\r\n            className=\"auth-btn btn btn-primary col-2\"\r\n          />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Todos.css\"\r\n\r\nimport {PureComponent} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport dateFormat from \"dateformat\";\r\nimport {TodoForm} from \"./TodoForm\";\r\n\r\n\r\n/**\r\n * Данные заметок. Проброс свойств к каждой заметке отдельно\r\n */\r\nexport class TodosData extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {\r\n      todos, users, projects, login, isAuthenticated, deleteTodo, editTodo,\r\n      admin\r\n    } = this.props\r\n\r\n    return (\r\n      <div className=\"todos-data\">\r\n        {todos.map((todo, idx) =>\r\n          <TodosDataEl\r\n            key={idx}\r\n            todo={todo}\r\n            users={users}\r\n            projects={projects}\r\n            login={login}\r\n            isAuthenticated={isAuthenticated}\r\n            deleteTodo={deleteTodo}\r\n            editTodo={editTodo}\r\n            todos={todos}\r\n            admin={admin}\r\n          />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Работа с каждой заметкой отдельно. Показ и скрытие формы заметки в\r\n * зависимости от авторизованности пользователя и авторства.\r\n * Возможность редактирования и удаления своих заметок\r\n */\r\nclass TodosDataEl extends PureComponent {\r\n  /**\r\n   * Изначально состояние видимости включено\r\n   * @param props.visible {Boolean}\r\n   */\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      visible: true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Переключатель видимого и невидимого состояния элементов\r\n   */\r\n  toggleDetails = () => {\r\n    const newToggleState = !this.state.visible\r\n    this.setState({visible: newToggleState})\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      todo, users, projects, login, isAuthenticated, deleteTodo, editTodo,\r\n      todos, admin\r\n    } = this.props\r\n    const {visible} = this.state\r\n    const user = users.find(user => user.username === login)\r\n    return (\r\n      <div>\r\n        {visible && <span className=\"comment\">{todo.text}</span>}\r\n\r\n        {isAuthenticated() && (todo.user === user.id || admin) &&\r\n        <div>\r\n            <span\r\n              onClick={this.toggleDetails}\r\n              className=\"btn btn-outline-secondary\"\r\n            >\r\n          {!visible ? \"Отменить\" : \"Изменить текст\"}\r\n            </span>\r\n          {!visible &&\r\n          <div>\r\n            Отредактировать тест:\r\n            <TodoForm\r\n              todo={todo}\r\n              text={todo.text}\r\n              editTodo={editTodo}\r\n              toggleDetails={() => this.toggleDetails()}\r\n              todos={todos}\r\n            />\r\n          </div>\r\n          }\r\n        </div>\r\n        }\r\n\r\n        <div className=\"comment-info\">\r\n          <Link className=\"comment-user\" to={`/users/${todo.user}`}>\r\n            {users.find(user => user.id === todo.user).username}\r\n          </Link>\r\n\r\n          <span>=> </span>\r\n\r\n          <Link\r\n            className=\"comment-user\"\r\n            to={`/projects/${projects.find(project =>\r\n              project.id === todo.project).id}`\r\n            }\r\n          >\r\n            {projects.find(project => project.id === todo.project).name}\r\n          </Link>\r\n\r\n          <span className=\"comment-datetime\">\r\n            {dateFormat(\r\n              todo.created, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\r\n            )}\r\n            <span>. </span>\r\n          </span>\r\n\r\n          <span className=\"comment-datetime\">\r\n            {todo.created !== todo.updated &&\r\n            <span className=\"comment-updated\">\r\n              <span>Обновлено: </span>\r\n              {dateFormat(todo.updated, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}\r\n            </span>\r\n\r\n            }\r\n          </span>\r\n          {isAuthenticated() && (todo.user === user.id || admin) &&\r\n          <div>\r\n            <span className=\"btn btn-outline-danger\">\r\n              <span onClick={() => deleteTodo(todo.id)}>Удалить заметку</span>\r\n            </span>\r\n          </div>\r\n          }\r\n        </div>\r\n        <hr/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Projects.css\"\r\n\r\nimport {PureComponent} from \"react\";\r\n\r\n/**\r\n * Создание и обработка формы создания проекта\r\n * При создании проекта пользователь обязательно попадает в список авторов,\r\n * но может указать соавторов дополнительно\r\n */\r\nexport class ProjectForm extends PureComponent {\r\n  /**\r\n   * Прокидывание свойств (props) от родителя, начальное состояние текста\r\n   * @param props {object} Данные, переданные родителем\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"name\": this.props.project ? this.props.project.name : \"\",\r\n      \"repository\": this.props.project ? this.props.project.repository : \"\",\r\n      \"usersId\": this.props.project ? this.props.project.users : \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события изменения поля ввода формы\r\n   *\r\n   * @param event {object} Событие, оттуда извлекаются данные проекта\r\n   */\r\n  handleChange(event) {\r\n    const {name, value} = event.target;\r\n    // Авторы\r\n    if (event.target.selectedOptions) {\r\n      let usersId = [];\r\n      for (let i = 0; i < event.target.selectedOptions.length; i++) {\r\n        usersId.push(+event.target.selectedOptions.item(i).value);\r\n      }\r\n      this.setState({\r\n        \"usersId\": usersId\r\n      });\r\n      return\r\n    }\r\n    // Имя и репозиторий\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события обработки отправки данных в форме\r\n   * К авторам добавляется создатель проекта\r\n   * @param event {object} Используется только для остановки события\r\n   */\r\n  handleSubmit(event) {\r\n    const {name, repository, usersId} = this.state;\r\n    const {\r\n      users, login, createProject, editProject, project, toggleDetails,\r\n      projects\r\n    } = this.props;\r\n    const user = users && users.find(user => user.username === login);\r\n    const allUsersId = [...usersId, user.id]\r\n    const data = {\r\n      \"name\": name,\r\n      \"repository\": repository,\r\n      \"users\": allUsersId\r\n    }\r\n\r\n    if (projects.find(el =>\r\n      el.name === name && el.repository === repository && el.users === usersId\r\n    )) {\r\n      alert(\"Запрещено создавать 2 проекта с совпадающими именем, \" +\r\n        \"репозиторием и авторами! Отредактируйте данные или измените авторов\");\r\n      event.preventDefault();\r\n      return\r\n    }\r\n\r\n    if (editProject) {\r\n      editProject(data, project.id);\r\n      toggleDetails();\r\n      event.preventDefault();\r\n      return\r\n    }\r\n    createProject(data);\r\n    this.setState({\r\n      \"name\": \"\",\r\n      \"repository\": \"\",\r\n      \"users\": \"\",\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Отображение формы. В качестве соавторов можно выбрать всех, кроме себя\r\n   * @returns {JSX.Element}\r\n   */\r\n  render() {\r\n    const {name, repository} = this.state;\r\n    const {users, login, project} = this.props;\r\n    const user = users.find(user => user.username === login);\r\n    const otherUsers = users.filter(el => el.id !== user.id);\r\n\r\n    return (\r\n      <form\r\n        onSubmit={(event => this.handleSubmit(event))}\r\n        className=\"row todo-form\"\r\n      >\r\n        <div className=\"col-3\">\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            name=\"name\"\r\n            maxLength=\"33\"\r\n            placeholder=\"Имя\"\r\n            aria-describedby=\"textHelpInline\"\r\n            value={name}\r\n            className=\"form-control\"\r\n            onChange={(event => this.handleChange(event))}\r\n          />\r\n          <span id=\"textHelpInline\" className=\"form-text\">\r\n            Введите имя проекта\r\n          </span>\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <input\r\n            required\r\n            type=\"url\"\r\n            name=\"repository\"\r\n            maxLength=\"99\"\r\n            placeholder=\"url-адрес репозитория\"\r\n            aria-describedby=\"textHelpInline\"\r\n            value={repository}\r\n            className=\"form-control\"\r\n            onChange={(event => this.handleChange(event))}\r\n          />\r\n          <span id=\"textHelpInline\" className=\"form-text\">\r\n            Введите url-адрес репозитория\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"col-3\">\r\n          <select\r\n            multiple\r\n            defaultValue={project && project.users}\r\n            name=\"usersId\"\r\n            className=\"form-control form-select\"\r\n            aria-describedby=\"textHelpSelect\"\r\n            placeholder=\"Пользователи\"\r\n            onChange={(event) =>\r\n              this.handleChange(event)\r\n            }\r\n          >\r\n            {otherUsers.map((user, idx) =>\r\n                <option value={user.id} key={idx}>\r\n                  {user.username}\r\n                </option>\r\n            )}\r\n          </select>\r\n          <span id=\"textHelpSelect\" className=\"form-text\">\r\n            Добавьте тех, кто так же работают с проектом\r\n          </span>\r\n        </div>\r\n\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Сохранить\"\r\n          className=\"auth-btn btn btn-primary col-2\"\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import \"./Projects.css\"\r\n\r\nimport {PureComponent} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport dateFormat from \"dateformat\";\r\nimport {ProjectForm} from \"./ProjectForm\";\r\n\r\n/**\r\n * Компонент данных проекта\r\n */\r\nexport class ProjectData extends PureComponent {\r\n  /**\r\n   * Изначально состояние видимости включено\r\n   * @param props.visible {Boolean}\r\n   */\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      visible: true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Переключатель видимого и невидимого состояния элементов\r\n   */\r\n  toggleDetails = () => {\r\n    const newToggleState = !this.state.visible\r\n    this.setState({visible: newToggleState})\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      project, users, login, isAuthenticated, deleteProject, admin,\r\n      editProject, projects\r\n    } = this.props\r\n    const {visible} = this.state\r\n    const user = users.find(user => user.username === login);\r\n\r\n    const noData = \"нет данных!\";\r\n\r\n    return (\r\n      <div className=\"project-data-set\">\r\n        {visible &&\r\n        <div>\r\n          <p>\r\n            <span>Имя: </span>\r\n            <span\r\n              className=\"project-data\">{\r\n              <Link to={`/projects/${project.id}`}>\r\n                {project.name || noData}\r\n              </Link>\r\n            }\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <span>Репозиторий: </span>\r\n            <span className=\"project-data\">\r\n          <a href={project.repository} target=\"_blank\" rel=\"noreferrer\">\r\n            {project.repository || noData}\r\n          </a>\r\n          </span>\r\n          </p>\r\n\r\n          <p>\r\n            <span>Работают с проектом: </span>\r\n            <span className=\"project-data\">\r\n            {project.users.map((user, idx) =>\r\n              <span key={idx}>\r\n                <Link to={`/users/${user}`}>\r\n                  {users.find(data => data.id === user).username}\r\n                </Link>\r\n                <span>, </span>\r\n              </span>\r\n            )}\r\n          </span>\r\n          </p>\r\n        </div>\r\n        }\r\n\r\n        {isAuthenticated() && (project.users\r\n          .find(el => el === user.id) || admin) &&\r\n        <div>\r\n            <span\r\n              onClick={this.toggleDetails}\r\n              className=\"btn btn-outline-secondary\"\r\n            >\r\n          {!visible ? \"Отменить\" : \"Изменить данные\"}\r\n            </span>\r\n          {!visible &&\r\n          <div>\r\n            Отредактировать поля:\r\n            <ProjectForm\r\n              users={users}\r\n              project={project}\r\n              login={login}\r\n              editProject={editProject}\r\n              toggleDetails={() => this.toggleDetails()}\r\n              projects={projects}\r\n            />\r\n          </div>\r\n          }\r\n        </div>\r\n        }\r\n\r\n        <p>\r\n          <span>Проект создан: </span>\r\n          <span className=\"project-data\">\r\n              {dateFormat(\r\n                project.created, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\r\n              )}\r\n          </span>\r\n        </p>\r\n\r\n        <p>\r\n          <span>Проект обновлён: </span>\r\n          <span className=\"project-data project-data-updated\">\r\n              {project.created !== project.updated\r\n                ? `${dateFormat(\r\n                  project.updated, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}`\r\n                : \"---\"\r\n              }\r\n          </span>\r\n        </p>\r\n        {isAuthenticated() && (project.users\r\n          .find(el => el === user.id) || admin) &&\r\n        <div className=\"btn btn-outline-danger\">\r\n          <div onClick={() => deleteProject(project.id)}>Удалить!</div>\r\n        </div>\r\n        }\r\n        <hr/>\r\n      </div>\r\n    )\r\n  }\r\n}","import \"./Users.css\"\r\n\r\nimport {PureComponent} from \"react\";\r\n\r\n/**\r\n * Создание и обработка формы регистрации пользователя\r\n */\r\nexport class UserForm extends PureComponent {\r\n  /**\r\n   * Прокидывание свойств (props) от родителя, начальные состояния\r\n   * @param props {object} Данные, переданные родителем\r\n   * @param props.roles {Array} Роли пользователей\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"username\": props.user ? props.user.username : \"\",\r\n      \"password\": \"\",\r\n      \"confirmPassword\": \"\",\r\n      \"firstName\": props.user ? props.user.firstName : \"\",\r\n      \"lastName\": props.user ? props.user.lastName : \"\",\r\n      \"middleName\": props.user ? props.user.middleName : \"\",\r\n      \"email\": props.user ? props.user.email : \"\",\r\n      \"birthdate\": props.user ? props.user.birthdate : \"\",\r\n      \"roles\": props.user ? props.user.roles : \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Вызывается сразу после монтирования (то есть, вставки компонента в DOM).\r\n   * Обнуление уведомления.\r\n   */\r\n  componentDidMount() {\r\n    const {setNotification} = this.props\r\n    setNotification(\"\")\r\n  }\r\n\r\n  /**\r\n   *  Вызывается сразу после обновления. Не вызывается при первом рендере.\r\n   *  Обработка уведомления. Если пришло, значит регистрация прошла успешно\r\n   */\r\n  componentDidUpdate() {\r\n    const {getNotification, setNotification} = this.props\r\n    const text = getNotification()\r\n    if (!!text) {\r\n      alert(`${text} \\nИспользуйте логин и пароль для входа в ЛК!`);\r\n      setNotification(\"\");\r\n      this.setState({\r\n        \"username\": \"\",\r\n        \"password\": \"\",\r\n        \"confirmPassword\": \"\",\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"\",\r\n        \"middleName\": \"\",\r\n        \"email\": \"\",\r\n        \"birthdate\": \"\",\r\n        \"roles\": \"\"\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Присваивание состояний на основе события изменения поля ввода формы\r\n   * @param event {object} Событие, оттуда извлекаются данные пользователя\r\n   */\r\n  handleChange(event) {\r\n    const {name, value} = event.target;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события обработки отправки данных в форме\r\n   * Валидация данных. Присвоение роли разработчика по умолчанию.\r\n   * @param event {object} Используется только для остановки события\r\n   */\r\n  async handleSubmit(event) {\r\n    const {\r\n      username, password, confirmPassword, firstName, lastName, middleName,\r\n      email, birthdate\r\n    } = this.state;\r\n    const {createUser, roles, editUser, toggleDetails, user} = this.props;\r\n    if (password !== confirmPassword) {\r\n      alert(\"Пароли не совпадают!\");\r\n      event.preventDefault();\r\n      return\r\n    }\r\n    const data = {\r\n      \"username\": username,\r\n      \"password\": password,\r\n      \"firstName\": firstName,\r\n      \"lastName\": lastName,\r\n      \"middleName\": middleName,\r\n      \"email\": email,\r\n      \"birthdate\": birthdate,\r\n      \"roles\": [+roles.find(role => role.role === \"разработчик\").id, ...user.roles]\r\n    }\r\n\r\n    if (editUser) {\r\n      editUser(data, user.id);\r\n      toggleDetails();\r\n      event.preventDefault();\r\n      return\r\n    }\r\n\r\n    createUser(data)\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Вызов методов this.handleChange и this.handleSubmit при событиях изменения\r\n   * поля ввода и отправки данных соответственно\r\n   * @returns {JSX.Element}\r\n   */\r\n  render() {\r\n    const {\r\n      username, password, confirmPassword, firstName, lastName, middleName,\r\n      email, birthdate\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <form\r\n          onSubmit={(event => this.handleSubmit(event))}\r\n          className=\"row todo-form\"\r\n        >\r\n          <legend>Данные пользователя:</legend>\r\n          <div className=\"col-4\">\r\n            <input\r\n              required\r\n              type=\"text\"\r\n              name=\"username\"\r\n              maxLength=\"44\"\r\n              placeholder=\"Login\"\r\n              aria-describedby=\"usernameHelpInline\"\r\n              value={username}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"usernameHelpInline\" className=\"form-text\">\r\n              <span className=\"sure\">*</span>\r\n              Введите уникальный login\r\n            </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              required\r\n              type=\"password\"\r\n              autoComplete=\"on\"\r\n              minLength=\"8\"\r\n              size=\"10\"\r\n              name=\"password\"\r\n              maxLength=\"44\"\r\n              placeholder=\"Password\"\r\n              aria-describedby=\"passwordHelpInline\"\r\n              value={password}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"passwordHelpInline\" className=\"form-text\">\r\n              <span className=\"sure\">*</span>\r\n              Придумайте пароль. Он не хранится в открытом виде.\r\n              Ваши данные защищены даже от администрации.\r\n           </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              required\r\n              type=\"password\"\r\n              autoComplete=\"on\"\r\n              minLength=\"8\"\r\n              size=\"10\"\r\n              name=\"confirmPassword\"\r\n              maxLength=\"44\"\r\n              placeholder=\"Подтвердите\"\r\n              aria-describedby=\"confirmPasswordHelpInline\"\r\n              value={confirmPassword}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"confirmPasswordHelpInline\" className=\"form-text\">\r\n              <span className=\"sure\">*</span>\r\n              Подтвердите пароль\r\n            </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              maxLength=\"44\"\r\n              placeholder=\"Имя\"\r\n              aria-describedby=\"firstNameHelpInline\"\r\n              value={firstName}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"firstNameHelpInline\" className=\"form-text\">\r\n              Ваше имя\r\n            </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              maxLength=\"55\"\r\n              placeholder=\"Фамилия\"\r\n              aria-describedby=\"lastNameHelpInline\"\r\n              value={lastName}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"lastNameHelpInline\" className=\"form-text\">\r\n             Фамилия\r\n            </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"middleName\"\r\n              maxLength=\"66\"\r\n              placeholder=\"Отчество\"\r\n              aria-describedby=\"textHelpInline\"\r\n              value={middleName}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"middleNameHelpInline\" className=\"form-text\">\r\n             Отчество\r\n            </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              required\r\n              type=\"email\"\r\n              pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\r\n              name=\"email\"\r\n              placeholder=\"Email\"\r\n              aria-describedby=\"textHelpInline\"\r\n              value={email}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"middleNameHelpInline\" className=\"form-text\">\r\n              <span className=\"sure\">*</span>\r\n             Ваш уникальный электронный адрес\r\n           </span>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <input\r\n              required\r\n              type=\"date\"\r\n              min=\"1900-12-01\"\r\n              max=\"2003-12-01\"\r\n              name=\"birthdate\"\r\n              placeholder=\"День рождения\"\r\n              aria-describedby=\"birthdateHelpInline\"\r\n              value={birthdate}\r\n              className=\"form-control\"\r\n              onChange={(event => this.handleChange(event))}\r\n            />\r\n            <span id=\"birthdateHelpInline\" className=\"form-text\">\r\n              <span className=\"sure\">*</span>\r\n              Дата рождения\r\n            </span>\r\n          </div>\r\n\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Сохранить\"\r\n            className=\"auth-btn btn btn-primary col-4\"\r\n          />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Users.css\"\r\n\r\nimport {PureComponent} from \"react\";\r\n\r\nimport dateFormat from \"dateformat\";\r\nimport {UserForm} from \"./UserForm\";\r\n\r\n/**\r\n * Компонент данных пользователя\r\n */\r\nexport class UserData extends PureComponent {\r\n  /**\r\n   * Изначально состояние видимости включено\r\n   * @param props.visible {Boolean}\r\n   */\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      visible: true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Переключатель видимого и невидимого состояния элементов\r\n   */\r\n  toggleDetails = () => {\r\n    const newToggleState = !this.state.visible\r\n    this.setState({visible: newToggleState})\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      user, roles, editUser, setNotification, getNotification, isAuthenticated,\r\n    login, admin} = this.props;\r\n    const {visible} = this.state;\r\n\r\n    const noData = \"нет данных!\";\r\n\r\n    return (\r\n      <div>\r\n        {visible &&\r\n        <div>\r\n          <div>\r\n            <span>Login: </span>\r\n            <span className=\"user-data\">{user.username}</span>\r\n          </div>\r\n          <div>\r\n            <span>Имя: </span>\r\n            <span className=\"user-data\">{user.firstName || noData}</span>\r\n          </div>\r\n          <div>\r\n            <span>Фамилия: </span>\r\n            <span className=\"user-data\">{user.lastName || noData}</span>\r\n          </div>\r\n          <div>\r\n            <span>Отчество: </span>\r\n            <span className=\"user-data\">{user.middleName || noData}</span>\r\n          </div>\r\n          <div>\r\n            <span>Электронная почта: </span>\r\n            <a href={`malito:${user.email}`} className=\"user-data\">\r\n              {user.email}\r\n            </a>\r\n          </div>\r\n          <div>\r\n            <span>Дата рождения: </span>\r\n            <span className=\"user-data\">\r\n              {user.birthdate\r\n                ? dateFormat(user.birthdate, \"fullDate\")\r\n                : noData\r\n              }\r\n          </span>\r\n          </div>\r\n          <div>\r\n            <span>Роли пользователя: </span>\r\n            {user.roles.map((roleId, idx) =>\r\n              <span key={idx} className=\"user-data\"> | {\r\n                roles.find(role => role.id === roleId) && roles\r\n                  .find(role => role.id === roleId).role\r\n              } |</span>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <span>Зарегистрировался(-ась): </span>\r\n            <span className=\"user-data\">\r\n              {dateFormat(\r\n                user.dateJoined, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\r\n              )}\r\n          </span>\r\n          </div>\r\n          <div>\r\n            <span>Последний раз заходил(-а): </span>\r\n            <span className=\"user-data\">\r\n              {dateFormat(\r\n                user.lastLogin, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\r\n              )}\r\n          </span>\r\n          </div>\r\n          <div>\r\n            <span>Данные обновлены: </span>\r\n            <span className=\"user-data user-data-updated\">\r\n                {user.updated !== user.dateJoined\r\n                  ? dateFormat(\r\n                    user.updated, \"dddd, mmmm dS, yyyy, h:MM:ss TT\"\r\n                  )\r\n                  : <span>---</span>}\r\n          </span>\r\n          </div>\r\n        </div>\r\n        }\r\n        {isAuthenticated() && (user.username === login || admin) &&\r\n        <div>\r\n            <span\r\n              onClick={this.toggleDetails}\r\n              className=\"btn btn-outline-secondary\"\r\n            >\r\n          {!visible ? \"Отменить\" : \"Изменить данные\"}\r\n            </span>\r\n          {!visible &&\r\n          <div>\r\n            <UserForm\r\n              roles={roles}\r\n              user={user}\r\n              getNotification={getNotification}\r\n              setNotification={setNotification}\r\n              toggleDetails={() => this.toggleDetails()}\r\n              editUser={editUser}\r\n            />\r\n          </div>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import \"./Users.css\"\r\n\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport {TodosData} from \"../Todos/TodosData\";\r\nimport {TodoForm} from \"../Todos/TodoForm\";\r\nimport {ProjectData} from \"../Projects/ProjectData\";\r\nimport {ProjectForm} from \"../Projects/ProjectForm\";\r\nimport {UserData} from \"./UserData\";\r\n\r\n\r\n/**\r\n * Личный кабинет пользователя\r\n * @param props {object} Свойства переданные родителем\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport const UserPage = (props) => {\r\n  let {id} = useParams();\r\n  id = +id;\r\n  const {\r\n    roles, users, projects, todos, isAuthenticated, login, createTodo,\r\n    createProject, deleteTodo, deleteProject, editTodo, admin, editProject,\r\n    editUser, getNotification, setNotification\r\n  } = props;\r\n  const user = users.find((user) => user.id === id);\r\n\r\n  const userTodos = todos.filter(todo => todo.user === id);\r\n\r\n  const userProjects = projects.filter(\r\n    project => project.users.find(projUser => projUser === id)\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {user &&\r\n      <div className=\"user\">\r\n\r\n        <UserData\r\n          user={user}\r\n          roles={roles}\r\n          editUser={editUser}\r\n          getNotification={getNotification}\r\n          setNotification={setNotification}\r\n          isAuthenticated={isAuthenticated}\r\n          login={login}\r\n          admin={admin}\r\n        />\r\n\r\n        {isAuthenticated() && user.username === login &&\r\n        <h4 className=\"user-create-title\">Создать:\r\n          <span> </span>\r\n          <a href=\"#project\">Проект</a>\r\n          <span> </span>\r\n          <a href=\"#todo\">Заметку</a>\r\n        </h4>\r\n        }\r\n\r\n        <div id=\"project\">\r\n          <br/>\r\n          <br/>\r\n        </div>\r\n\r\n        {isAuthenticated() && user.username === login &&\r\n          <div>\r\n            <h3>Создать проект</h3>\r\n            <ProjectForm\r\n              users={users}\r\n              projects={projects}\r\n              login={login}\r\n              createProject={createProject}\r\n            />\r\n          </div>\r\n\r\n        }\r\n\r\n        <h3 className=\"user-title\">Проекты пользователя: </h3>\r\n        <br/>\r\n\r\n        {userProjects.map((project, idx) =>\r\n          <ProjectData\r\n            key={idx}\r\n            project={project}\r\n            users={users}\r\n            isAuthenticated={isAuthenticated}\r\n            login={login}\r\n            deleteProject={deleteProject}\r\n            admin={admin}\r\n            editProject={editProject}\r\n            projects={projects}\r\n          />\r\n        )}\r\n\r\n        <div id=\"todo\">\r\n          <br/>\r\n          <br/>\r\n        </div>\r\n\r\n        {isAuthenticated() && user.username === login &&\r\n        <div>\r\n          <h3>Создать заметку</h3>\r\n          <TodoForm\r\n          users={users}\r\n          projects={projects}\r\n          login={login}\r\n          createTodo={createTodo}\r\n          todos={todos}\r\n        />\r\n        </div>\r\n        }\r\n\r\n        <h3 className=\"user-title\">Заметки пользователя: </h3>\r\n        <br/>\r\n\r\n        <TodosData\r\n          todos={userTodos}\r\n          users={users}\r\n          projects={projects}\r\n          login={login}\r\n          isAuthenticated={isAuthenticated}\r\n          deleteTodo={deleteTodo}\r\n          editTodo={editTodo}\r\n          admin={admin}\r\n        />\r\n\r\n      </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import \"./Projects.css\"\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {TodoForm} from \"../Todos/TodoForm\";\r\nimport {TodosData} from \"../Todos/TodosData\";\r\nimport {ProjectData} from \"./ProjectData\";\r\n\r\n\r\n/**\r\n * Страница проекта. Формирование данных проекта и заполнение\r\n * У авторизованных пользователей есть возможность создавать заметки к\r\n * проектам, редактировать, удалить проект со всеми заметками, если он автор\r\n * @param props {object} Данные, переданные родителем\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport const ProjectPage = (props) => {\r\n\r\n  let {id} = useParams();\r\n  id = +id;\r\n  const {\r\n    users, projects, todos, isAuthenticated, login, createTodo, deleteTodo,\r\n    deleteProject, editTodo, admin, editProject\r\n  } = props;\r\n\r\n  const project = projects.find(project => project.id === id);\r\n\r\n  const projectTodos = todos.filter(todo => todo.project === id)\r\n\r\n  return (\r\n    <div className=\"project-page\">\r\n      {project &&\r\n      <div>\r\n\r\n        <ProjectData\r\n          project={project}\r\n          users={users}\r\n          isAuthenticated={isAuthenticated}\r\n          login={login}\r\n          deleteProject={deleteProject}\r\n          editProject={editProject}\r\n          admin={admin}\r\n          projects={projects}\r\n        />\r\n\r\n        {isAuthenticated() &&\r\n          <div>\r\n            <h3>Создать заметку</h3>\r\n            <TodoForm\r\n              projectId={id}\r\n              users={users}\r\n              login={login}\r\n              createTodo={createTodo}\r\n              todos={todos}\r\n            />\r\n          </div>\r\n\r\n        }\r\n\r\n        <h3>Заметки к проекту: </h3><br/>\r\n        <TodosData\r\n          todos={projectTodos}\r\n          users={users}\r\n          projects={projects}\r\n          login={login}\r\n          isAuthenticated={isAuthenticated}\r\n          deleteTodo={deleteTodo}\r\n          editTodo={editTodo}\r\n          admin={admin}\r\n        />\r\n\r\n      </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import \"./Authorization.css\"\r\n\r\nimport React from \"react\";\r\n\r\n/**\r\n * Создание и обработка формы авторизации\r\n */\r\nexport class LoginForm extends React.Component {\r\n  /**\r\n   * Прокидывание свойств (props) от родителя, начальные состояния логина/пароля\r\n   * @param props\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"login\": \"\",\r\n      \"password\": \"\"\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события изменения поля ввода формы\r\n   * @param event - Событие, оттуда извлекаются имена и значения login и password\r\n   */\r\n  handleChange(event) {\r\n    const {name, value} = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Присваивание состояний на основе события обработки отправки данных в форме\r\n   * login, password получен из состояния - куда они попали из this.handleChange\r\n   * auth получается из свойств, которые передал родитель\r\n   * @param event используется только для остановки события\r\n   */\r\n  handleSubmit(event) {\r\n    const {login, password} = this.state;\r\n    const {auth} = this.props;\r\n    auth(login, password);\r\n    this.setState({\r\n      \"login\": \"\",\r\n      \"password\": \"\"\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Отображение формы. Получение login, password из состояния\r\n   * Вызов методов this.handleChange и this.handleSubmit при событиях изменения\r\n   * поля ввода и отправки данных соответственно\r\n   * @returns {JSX.Element}\r\n   */\r\n  render() {\r\n\r\n    const {login, password} = this.state;\r\n\r\n    return (\r\n      <form onSubmit={(event => this.handleSubmit(event))} className=\"row g-2\">\r\n        <div className=\"col-auto\">\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            name=\"login\"\r\n            placeholder=\"Логин\"\r\n            aria-describedby=\"loginHelpInline\"\r\n            value={login}\r\n            className=\"form-control\"\r\n            onChange={(event => this.handleChange(event))}\r\n          />\r\n          <span id=\"loginHelpInline\" className=\"form-text\">\r\n            Введите Ваш уникальный логин, указанный при регистрации\r\n          </span>\r\n        </div>\r\n        <div className=\"col-auto\">\r\n          <input\r\n            required\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Пароль\"\r\n            aria-describedby=\"passwordHelpInline\"\r\n            value={password}\r\n            className=\"form-control\"\r\n            onChange={(event => this.handleChange(event))}\r\n          />\r\n          <span id=\"passwordHelpInline\" className=\"form-text\">\r\n            Должно быть 8-20 символов.\r\n          </span>\r\n        </div>\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Отправить\"\r\n          className=\"auth-btn btn btn-primary col-auto\"\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Navigate,\r\n  Route,\r\n  Routes,\r\n} from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nimport Cookies from \"universal-cookie/es6\";\r\n\r\nimport {Header} from \"./components/Header\";\r\nimport {Users} from \"./components/Users\";\r\nimport {Projects} from \"./components/Projects\";\r\nimport {Todos} from \"./components/Todos\";\r\nimport {Footer} from \"./components/Footer\";\r\nimport {NotFound404} from \"./components/NotFound404\";\r\nimport {UserPage} from \"./components/Users/UserPage\";\r\nimport {ProjectPage} from \"./components/Projects/ProjectPage\";\r\nimport {LoginForm} from \"./components/Authorization\";\r\nimport {UserForm} from \"./components/Users/UserForm\";\r\n\r\n\r\n/**\r\n * На клиенте используется принцип One-Way Data Flow\r\n * Главный родитель компонентов\r\n */\r\nexport class GeneralApp extends React.Component {\r\n  /**\r\n   * Конструктор главного родителя компонентов. Назначение начальных состояний\r\n   * @param props свойства унаследованные от вышестоящего компонента\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"domain\": \"https://backend.radif.ru\",\r\n\r\n      \"rolesEndpoint\": \"/api/roles/\",\r\n      \"usersEndpoint\": \"/api/users/\",\r\n      \"projectsEndpoint\": \"/api/projects/\",\r\n      \"todosEndpoint\": \"/api/todos/\",\r\n\r\n      \"graphQLEndpoint\": \"/graphql/\",\r\n\r\n      \"tokenEndpoint\": \"/api/token/\",\r\n      \"tokenRefreshEndpoint\": \"/api/token/refresh/\",\r\n\r\n      \"limit\": 999,\r\n      \"offset\": 0,\r\n\r\n      \"roles\": [],\r\n      \"users\": [],\r\n      \"projects\": [],\r\n      \"todos\": [],\r\n\r\n      \"token\": \"\",\r\n      \"refreshToken\": \"\",\r\n      \"login\": \"\",\r\n      \"admin\": false,\r\n\r\n      \"notification\": \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Вызывается сразу после монтирования (то есть, вставки компонента в DOM).\r\n   * В этом методе должны происходить действия, которые требуют наличия\r\n   * DOM-узлов. Это хорошее место для создания сетевых запросов.\r\n   */\r\n  componentDidMount() {\r\n    this.getToken()\r\n  }\r\n\r\n  /**\r\n   * Получение токена и логина из хранилища - Cookies и присвоение состояниям\r\n   */\r\n  getToken() {\r\n    const cookies = new Cookies();\r\n    const token = cookies.get(\"token\");\r\n    const login = cookies.get(\"login\");\r\n    this.setState(\r\n      {\"token\": token, \"login\": login}, () => this.getAllData());\r\n  }\r\n\r\n  /**\r\n   * Создание и возврат заголовков для запросов\r\n   * @returns {{\"Content-Type\": string}}\r\n   */\r\n  getHeaders() {\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n    if (this.isAuthenticated()) {\r\n      // Для JWT к токену в заголовке нужно добавить префикс Bearer\r\n      // headers[\"Authorization\"] = `Bearer ${this.state.token}`;\r\n      // Для безопасности изменил проверку на сервере значения заголовка на\r\n      // кастомное\r\n      headers[\"Authorization\"] = `Bear_R@d1f ${this.state.token}`;\r\n    }\r\n    return headers\r\n  }\r\n\r\n  /**\r\n   * Проверка - авторизован ли пользователь\r\n   * @returns {boolean} Возвращает true или false\r\n   */\r\n  isAuthenticated() {\r\n    return !!(this.state.token)\r\n  }\r\n\r\n  /**\r\n   * Проверка - является ли администратором пользователь\r\n   * @param login {string} Логин пользователя\r\n   * @param users {Array} Массив объектов пользователей\r\n   * @param roles {Array} Массив объектов ролей\r\n   * @returns {boolean} Возвращает true или false\r\n   */\r\n  isAdmin(login, users, roles) {\r\n    const user = users.find(user => user.username === login);\r\n    const adminRole = roles.find(role => role.role === \"администратор\");\r\n    return !!user.roles.find(roleId => roleId === adminRole.id)\r\n  }\r\n\r\n  /**\r\n   * Авторизация пользователя. Получение токена на основе логина и пароля\r\n   * @param login {string} - Логин\r\n   * @param password {string}  - Пароль\r\n   */\r\n  auth(login, password) {\r\n    const {domain, tokenEndpoint} = this.state\r\n    axios.post(`${domain}${tokenEndpoint}`, {\r\n      \"username\": login,\r\n      \"password\": password\r\n    }).then(response => {\r\n      this.setToken(response.data[\"access\"], login);\r\n    }).catch(error => {\r\n        console.log(`getToken err: ${error}`);\r\n        alert(\"Неверный логин или пароль\");\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Присвоение токена и логина в Cookies для всех путей и состояния приложения\r\n   * @param token {string} Токен\r\n   * @param login {string} Логин\r\n   */\r\n  setToken(token, login) {\r\n    const cookies = new Cookies();\r\n    cookies.set(\"token\", token, {path: \"/\"});\r\n    cookies.set(\"login\", login, {path: \"/\"});\r\n\r\n\r\n    this.setState({\"token\": token, \"login\": login},\r\n      () => {\r\n        this.getAllData();\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Деавторизация\r\n   */\r\n  logout() {\r\n    this.setToken(\"\", \"\");\r\n  }\r\n\r\n  /**\r\n   * Получить все данные\r\n   */\r\n  getAllData() {\r\n    // Если пользователь не авторизован для получения данных использую GraphQL.\r\n    // Сделано просто для примера. Никакого преимущества это не даёт и даже\r\n    // наоборот размер данных в 2 раза выше из-за того, что id дополнительно\r\n    // вкладываются в объекты (словари) с 1 полем id. Ещё и клиент больше\r\n    // нагружается из-за затрат на извлечение id и преобразование их к числу...\r\n    if (!this.isAuthenticated()) {\r\n      this.getRolesDataSetGraphQL();\r\n    } else {\r\n      this.getRolesDataSetREST();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить данные ролей из Django REST и все связанные данные других таблиц\r\n   */\r\n  getRolesDataSetREST() {\r\n    const {\r\n      domain, rolesEndpoint, limit, offset\r\n    } = this.state;\r\n\r\n    this.getDataREST(domain, rolesEndpoint, limit, offset)\r\n  }\r\n\r\n  /**\r\n   * Получить данные ролей из GraphQL и все связанные данные других таблиц\r\n   */\r\n  getRolesDataSetGraphQL() {\r\n    const {domain, graphQLEndpoint} = this.state;\r\n    const queryGraphQL = `\r\n      {\r\n        allRoles {\r\n          id\r\n          role\r\n          roleUsers {\r\n            id\r\n            username\r\n            firstName\r\n            lastName\r\n            middleName\r\n            email\r\n            birthdate\r\n            lastLogin\r\n            isStaff\r\n            isActive\r\n            dateJoined\r\n            updated\r\n            roles {\r\n              id\r\n            }\r\n            userProjects {\r\n              id\r\n              name\r\n              repository\r\n              isActive\r\n              created\r\n              updated\r\n              users {\r\n                id\r\n              }\r\n            }\r\n            userTodos{\r\n              id\r\n              text\r\n              isActive\r\n              created\r\n              updated\r\n              project {\r\n                id\r\n              }\r\n              user {\r\n                id\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }`;\r\n    this.getDataGraphQL(domain, graphQLEndpoint, queryGraphQL);\r\n  }\r\n\r\n  /**\r\n   * Получить данные пользователей из Django REST со связанными данными\r\n   */\r\n  getUsersDataSetREST() {\r\n    const {\r\n      domain, usersEndpoint, limit, offset\r\n    } = this.state;\r\n\r\n    this.getDataREST(domain, usersEndpoint, limit, offset)\r\n  }\r\n\r\n  /**\r\n   * Получить данные заметок из Django REST со связанными данными\r\n   */\r\n  getTodosDataSetREST() {\r\n    const {\r\n      domain, todosEndpoint, limit, offset\r\n    } = this.state;\r\n\r\n    this.getDataREST(domain, todosEndpoint, limit, offset);\r\n  }\r\n\r\n  /**\r\n   * Получить данные проектов из Django REST со связанными данными\r\n   */\r\n  getProjectsDataSetREST() {\r\n    const {\r\n      domain, projectsEndpoint, limit, offset\r\n    } = this.state;\r\n\r\n    this.getDataREST(domain, projectsEndpoint, limit, offset);\r\n  }\r\n\r\n  /**\r\n   * Регистрация пользователя\r\n   * @param data {Object} Объект данных пользователя\r\n   * @returns {Promise<void>}\r\n   */\r\n  async createUser(data) {\r\n    const {domain, usersEndpoint} = this.state;\r\n    await this.createDataREST(data, domain, usersEndpoint);\r\n  }\r\n\r\n  /**\r\n   * Создание проекта с помощью Django REST.\r\n   * При создании проекта создателю назначается дополнительная роль -\r\n   * владелец проекта. Но если он добавляет других пользователей к этому\r\n   * проекту им не назначается данная роль.\r\n   * @param data.name {string} Имя проекта\r\n   * @param data.repository {url, string} Ссылка на репозиторий проекта\r\n   * @param data.users {array} Массив id пользователей\r\n   * @returns {Promise<void>}\r\n   */\r\n  async createProject(data) {\r\n    const {domain, projectsEndpoint, roles, users, login} = this.state;\r\n    await this.createDataREST(data, domain, projectsEndpoint);\r\n\r\n    const projectOwnerRole = +roles.find(\r\n      role => role.role === \"владелец проекта\"\r\n    ).id\r\n    const authUser = users.find(user => user.username === login)\r\n    if (!authUser.roles.find(role => role === projectOwnerRole)) {\r\n      await this.editUser({\r\n        \"roles\": [...authUser.roles, projectOwnerRole]\r\n      }, +authUser.id)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Создание заметки с помощью Django REST\r\n   * @param data.project {number} Идентификатор проекта\r\n   * @param data.user {number} Идентификатор пользователя\r\n   * @param data.text {string} Текст заметки\r\n   * @returns {Promise<void>}\r\n   */\r\n  async createTodo(data) {\r\n    const {domain, todosEndpoint} = this.state;\r\n    await this.createDataREST(data, domain, todosEndpoint);\r\n  }\r\n\r\n  /**\r\n   * Редактирование пользователя. Обновление состояния актуальными данными без\r\n   * перезагрузки данных из БД.\r\n   * @param data {Object} Изменяемые данные пользователя\r\n   * @param id {number} Идентификатор пользователя\r\n   * @returns {Promise<void>}\r\n   */\r\n  async editUser(data, id) {\r\n    const {domain, usersEndpoint, users} = this.state;\r\n    const newUser = users.find(todo => todo.id === id);\r\n    // Обновляю проект новыми данными, если есть\r\n    Object.keys(data).map((objectKey, index) =>\r\n      newUser[objectKey] = data[objectKey]\r\n    );\r\n    await this.setState(\r\n      {\r\n        \"users\": users.map(user =>\r\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\r\n          user.id === id\r\n            ? {...user, ...newUser, updated: new Date()}\r\n            : user\r\n        )\r\n      },\r\n      // Отправляю в БД только те данные, которые нужно изменить\r\n      () => this.editDataREST(data, domain, usersEndpoint, id)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Редактирование проекта. Обновление состояния актуальными данными без\r\n   * перезагрузки данных из БД.\r\n   * @param data {Object} Объект со свойствами проекта\r\n   * @param id {number} Идентификатор проекта\r\n   * @returns {Promise<void>}\r\n   */\r\n  async editProject(data, id) {\r\n    const {domain, projectsEndpoint, projects} = this.state;\r\n    const newProject = projects.find(todo => todo.id === id);\r\n    // Обновляю проект новыми данными, если есть\r\n    Object.keys(data).map((objectKey, index) =>\r\n      newProject[objectKey] = data[objectKey]\r\n    );\r\n    await this.setState(\r\n      {\r\n        \"projects\": projects.map(project =>\r\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\r\n          project.id === id\r\n            ? {...project, ...newProject, updated: new Date()}\r\n            : project\r\n        )\r\n      },\r\n      // Отправляю в БД только те данные, которые нужно изменить\r\n      () => this.editDataREST(data, domain, projectsEndpoint, id)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Редактирование заметки. Обновление состояния актуальными данными без\r\n   * перезагрузки данных из БД.\r\n   * @param data {Object} Объект со свойствами заметки\r\n   * @param data.text {string} Текст заметки\r\n   * @param id {number} Идентификатор заметки\r\n   * @returns {Promise<void>}\r\n   */\r\n  async editTodo(data, id) {\r\n    const {domain, todosEndpoint, todos} = this.state;\r\n    const newTodo = todos.find(todo => todo.id === id);\r\n    // Обновляю заметку новыми данными, если есть\r\n    Object.keys(data).map((objectKey, index) =>\r\n      newTodo[objectKey] = data[objectKey]\r\n    );\r\n    await this.setState(\r\n      {\r\n        \"todos\": todos.map(todo =>\r\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\r\n          todo.id === id\r\n            ? {...todo, ...newTodo, updated: new Date()}\r\n            : todo\r\n        )\r\n      },\r\n      // Отправляю в БД только те данные, которые нужно изменить\r\n      () => this.editDataREST(data, domain, todosEndpoint, id)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Удаление проекта с помощью Django REST.\r\n   * Перерисовка без перезагрузки данных из БД.\r\n   * Вместе с проектом удаляются все связанные заметки.\r\n   * @param id {number} Идентификатор проекта\r\n   * @returns {Promise<void>}\r\n   */\r\n  async deleteProject(id) {\r\n    const {domain, projectsEndpoint, projects, todos} = this.state;\r\n    await this.setState(\r\n      {\r\n        \"projects\": projects.filter(projects => projects.id !== id),\r\n        \"todos\": todos.filter(todo => todo.project !== id)\r\n      },\r\n      () => this.deleteDataREST(domain, projectsEndpoint, id)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Удаление заметки с помощью Django REST.\r\n   * Перерисовка без перезагрузки данных из БД.\r\n   * @param id {number} Идентификатор заметки\r\n   * @returns {Promise<void>}\r\n   */\r\n  async deleteTodo(id) {\r\n    const {domain, todosEndpoint, todos} = this.state;\r\n    await this.setState(\r\n      {\"todos\": todos.filter(todo => todo.id !== id)},\r\n      () => this.deleteDataREST(domain, todosEndpoint, id)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Асинхронный запрос данных из Django REST, извлечение и обработка\r\n   * @param domain {string} Домен\r\n   * @param endpoint {string} Конечная точка\r\n   * @const headers {object} Заголовки\r\n   * @param limit {number} Лимит на количество полученных данных\r\n   * @param offset {number} Смещение относительно первого объекта\r\n   * @returns {Promise<void>}\r\n   */\r\n  async getDataREST(\r\n    domain = \"http://localhost:3333\",\r\n    endpoint, limit = 100, offset = 0) {\r\n\r\n    const headers = this.getHeaders();\r\n    await axios.get(\r\n      `${domain}${endpoint}?limit=${limit}&offset=${offset}/`,\r\n      {headers}).then(response => {\r\n      const data = response.data.results;\r\n      this.setAllData(data);\r\n    })\r\n      .catch((error) => {\r\n        this.handleErrors(error, \"getDataREST\");\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Асинхронный запрос данных из GraphQL, извлечение и обработка\r\n   * Так же происходит пересборка данных, комментарии ниже\r\n   * @param domain {string} Домен\r\n   * @param graphQLEndpoint {string} Конечная точка\r\n   * @param queryGraphQL {string} Запрос на языке GraphQL\r\n   * @const headers {object} Заголовки\r\n   * @returns {Promise<void>}\r\n   */\r\n  async getDataGraphQL(domain, graphQLEndpoint, queryGraphQL) {\r\n    const headers = this.getHeaders();\r\n    await axios.post(\r\n      `${domain}${graphQLEndpoint}`,\r\n      {\r\n        query: queryGraphQL,\r\n        headers: headers,\r\n      }).then(response => {\r\n\r\n      const rolesSet = response.data.data.allRoles;\r\n\r\n      const usersSet = rolesSet.map(role => {\r\n        // id ролей перевожу в числовой формат.\r\n        // Хотя и role.id не возвращается, но как мы знаем данные в JS хранятся\r\n        // по ссылке, так что они изменились глобально.\r\n        role.id = +role.id;\r\n        // Возвращаю пользователей для дальнейшей мутации данных\r\n        return role.roleUsers;\r\n      })\r\n        .reduce((arr1, arr2) => [...arr1, ...arr2])\r\n\r\n      // Во избежание конфликтов пересобираю данные так же, как если бы запрос\r\n      // делался на Django REST, а не на GraphQL. ID перевожу в цифровой формат\r\n\r\n      usersSet.map(user => {\r\n        user.id = +user.id;\r\n        // Преобразую объекты ролей в массив из id\r\n        const rolesArr = [];\r\n        user.roles.map(role => {\r\n          rolesArr.push(+role.id);\r\n          return role\r\n        });\r\n        user.roles = rolesArr;\r\n        user.userTodos.map(todo => {\r\n          // В поле user и project помещаю соответствующие id, вместо объектов\r\n          todo.id = +todo.id;\r\n          todo.user = +todo.user.id;\r\n          todo.project = +todo.project.id;\r\n          return todo\r\n        });\r\n        // Преобразую поля проектов\r\n        user.userProjects.map(project => {\r\n          project.id = +project.id;\r\n          // Вместо массива объектов, делаю массив из id\r\n          const usersArr = [];\r\n          project.users.map(user => {\r\n            usersArr.push(+user.id);\r\n            return user\r\n          })\r\n          project.users = usersArr;\r\n          return project\r\n        })\r\n        return user\r\n      })\r\n\r\n      this.setAllData(rolesSet);\r\n\r\n    })\r\n      .catch((error) => {\r\n        this.handleErrors(error, \"getDataGraphQL\");\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Сохраняю полученные данные из Django REST и GraphQL в состояния.\r\n   * Распределяю данные по категориям и сортирую.\r\n   * @param data {array} Полученные данные.\r\n   */\r\n  setAllData(data) {\r\n    let roles = [];\r\n    let projects = [];\r\n    let todos = [];\r\n\r\n    let usersSet = data.map(role => {\r\n      // Собираю роли\r\n      roles.push({id: role.id, role: role.role});\r\n      // Возвращаю набор пользователей со связанными данными\r\n      return role.roleUsers;\r\n    })\r\n      .reduce((arr1, arr2) => [...arr1, ...arr2], ...[])\r\n    // Уникальные id пользователей\r\n    const uniqueUsersIds = [...new Set(usersSet.map(project => project.id))];\r\n    // Уникальные пользователи\r\n    const users = uniqueUsersIds.map(userId => {\r\n      const {userProjects, userTodos, ...rest} = usersSet.find(\r\n        user => user.id === userId\r\n      );\r\n      // Собираю заметки\r\n      todos.push(...userTodos);\r\n      // Собираю проекты\r\n      projects.push(...userProjects);\r\n      // Возвращаю чистых пользователей\r\n      return rest;\r\n    });\r\n    // Сортирую пользователей по дате регистрации\r\n    users.sort((a, b) =>\r\n      new Date(b.dateJoined) - new Date(a.dateJoined)\r\n    )\r\n\r\n    // Уникальные id проектов\r\n    const uniqueProjectsIds = [...new Set(projects.map(project => project.id))];\r\n    // Уникальные проекты\r\n    projects = uniqueProjectsIds\r\n      .map(id => projects.find(project => project.id === id));\r\n    // Сортировка проектов по дате обновления\r\n    projects.sort((a, b) =>\r\n      new Date(b.created) - new Date(a.created)\r\n    )\r\n\r\n    // Сортировка заметок по дате обновления\r\n    todos.sort((a, b) =>\r\n      new Date(b.created) - new Date(a.created)\r\n    )\r\n\r\n    let admin = false;\r\n    if (this.isAuthenticated()) {\r\n      admin = this.isAdmin(this.state.login, users, roles);\r\n    }\r\n\r\n    this.setState({\r\n      \"roles\": roles,\r\n      \"users\": users,\r\n      \"projects\": projects,\r\n      \"todos\": todos,\r\n      \"admin\": admin\r\n    })\r\n  }\r\n\r\n  /**\r\n   * POST запрос в Django REST на создание данных\r\n   * В случае удачной операции создаю уведомление. Перезагружаю данные с\r\n   * сервера для избежания артефактов, рассинхрона с актуальными данными...\r\n   * В других методах (удаления, изменения) происходит перерисовка данных,\r\n   * без повторной загрузки из БД\r\n   * @param data {object} Отправляемые данные\r\n   * @param domain {string} Домен\r\n   * @param endpoint {string} Конечная точка\r\n   * @const headers {object} Заголовки\r\n   */\r\n  createDataREST(data, domain, endpoint) {\r\n    const headers = this.getHeaders();\r\n    axios.post(`${domain}${endpoint}`, data, {headers})\r\n      .then(response => {\r\n        this.setNotification(\"Успешная операция!\");\r\n        this.getAllData();\r\n      })\r\n      .catch(error => {\r\n          this.handleErrors(error, \"createDataREST\");\r\n        }\r\n      )\r\n  }\r\n\r\n  /**\r\n   * Редактирование данных с помощью Django REST. Patch запрос.\r\n   * Данные перезагружаются только в случае ошибки.\r\n   * Перерисовка происходит через метод, вызвавший этот метод.\r\n   * @param data {Object} Объект данных\r\n   * @param domain {string} Домен\r\n   * @param endpoint {string} Конечная точка\r\n   * @param id {number} Идентификатор изменяемых данных\r\n   */\r\n  editDataREST(data, domain, endpoint, id) {\r\n    const headers = this.getHeaders();\r\n    axios.patch(`${domain}${endpoint}${id}/`, data, {headers})\r\n      .then(response => {\r\n      })\r\n      .catch(error => {\r\n          this.handleErrors(error, \"createDataREST\");\r\n          this.getAllData();\r\n        }\r\n      )\r\n  }\r\n\r\n  /**\r\n   * Удаление данных с помощью Django REST.\r\n   * Данные перезагружаются только в случае ошибки.\r\n   * Перерисовка происходит через метод, вызвавший этот метод.\r\n   * @param domain {string} Домен\r\n   * @param endpoint {string} Конечная точка\r\n   * @param id {number} Идентификатор удаляемых данных\r\n   * @const headers {object} Заголовки\r\n   */\r\n  deleteDataREST(domain, endpoint, id) {\r\n    const headers = this.getHeaders()\r\n    axios.delete(`${domain}${endpoint}${id}`, {headers})\r\n      .then(response => {\r\n      })\r\n      .catch(error => {\r\n          this.handleErrors(error, \"deleteDataREST\");\r\n          this.getAllData();\r\n        }\r\n      )\r\n  }\r\n\r\n  /**\r\n   * Обработка ошибок связанных с токеном, извлечённом из\r\n   * Cookies браузера, недоступностью сервера и т.д.\r\n   * @param error {object} Объект ошибки\r\n   * @param text {string} Пояснение к ошибке, или откуда вызвана\r\n   */\r\n  handleErrors(error, text = \"\") {\r\n    console.log(`${text} err: ${error}`);\r\n    if (error.message.indexOf(\"ISO-8859-1\") !== -1) {\r\n      alert(`Токен испорчен - неправильный формат! Кто-то изменил Cookies!\r\n          \\nПовторите вход в свой личный кабинет! И проверьтесь на вирусы!`);\r\n      this.setToken(\"\", \"\");\r\n    }\r\n    if (!!error.request) {\r\n      if (error.request.status === 401) {\r\n        alert(`Токен просрочен. \\nПовторите вход в свой личный кабинет!`);\r\n        this.setToken(\"\", \"\");\r\n      } else if (error.request.status === 0) {\r\n        alert(`Сервер недоступен! \\nПопробуйте зайти позже`);\r\n      } else if (error.request.status === 500) {\r\n        alert(`Сервер не может обработать Ваш запрос.\r\n        \\nВероятно вы отправили некорректные данные.\r\n        `);\r\n      } else if (error.request.status === 403) {\r\n        alert(`Для Вас это действие запрещено!`)\r\n      } else if (error.request.status === 404) {\r\n        alert(`Данные не найдены. Подождите. Не кликайте много раз подряд. \r\n        \\nВозможно мы ещё не обработали запрос`)\r\n      } else if (error.request.status === 400) {\r\n        alert(`Сервер не принял Ваши данные. Данные должны быть уникальны. \r\n        \\nПоля должны быть заполнены правильно. Попробуйте ввести что-то другое\r\n        `)\r\n      }\r\n    } else {\r\n      alert(`Ошибка - ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить уведомление\r\n   * @returns {string|Notification|*}\r\n   */\r\n  getNotification() {\r\n    return this.state.notification\r\n  }\r\n\r\n  /**\r\n   * Установка уведомления\r\n   * @param text {string} Текст уведомления\r\n   */\r\n  setNotification(text) {\r\n    this.setState({\r\n      \"notification\": text\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Отображение каркаса приложения. Маршрутизация для дочерних компонентов\r\n   * @returns {JSX.Element}\r\n   */\r\n  render() {\r\n    const {roles, users, projects, todos, login, admin} = this.state;\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"content\">\r\n          <Header\r\n            isAuthenticated={() => this.isAuthenticated()}\r\n            logout={() => this.logout()}\r\n            login={login}\r\n            users={users}\r\n          />\r\n          <div className=\"main-content\">\r\n            <Routes>\r\n              <Route\r\n                exact path=\"/users\"\r\n                element={<Users users={users} roles={roles}/>}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/users/:id\"\r\n                element={\r\n                  <UserPage\r\n                    roles={roles}\r\n                    users={users}\r\n                    projects={projects}\r\n                    todos={todos}\r\n                    login={login}\r\n                    isAuthenticated={() => this.isAuthenticated()}\r\n                    createTodo={(project, user, text) =>\r\n                      this.createTodo(project, user, text)\r\n                    }\r\n                    deleteTodo={id => this.deleteTodo(id)}\r\n                    createProject={(name, repository, users) =>\r\n                      this.createProject(name, repository, users)\r\n                    }\r\n                    deleteProject={(id => this.deleteProject(id))}\r\n                    editTodo={(data, id) => this.editTodo(data, id)}\r\n                    admin={admin}\r\n                    editProject={(data, id) => this.editProject(data, id)}\r\n                    editUser={(data, id) => this.editUser(data, id)}\r\n                    getNotification={() => this.getNotification()}\r\n                    setNotification={text => this.setNotification(text)}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/registration\"\r\n                element={\r\n                  <UserForm\r\n                    roles={roles}\r\n                    createUser={data => this.createUser(data)}\r\n                    getNotification={() => this.getNotification()}\r\n                    setNotification={text => this.setNotification(text)}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/projects\"\r\n                element={\r\n                  <Projects\r\n                    users={users}\r\n                    projects={projects}\r\n                    isAuthenticated={() => this.isAuthenticated()}\r\n                    login={login}\r\n                    deleteProject={(id => this.deleteProject(id))}\r\n                    admin={admin}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/projects/:id\"\r\n                element={\r\n                  <ProjectPage\r\n                    users={users}\r\n                    isAuthenticated={() => this.isAuthenticated()}\r\n                    login={login}\r\n                    projects={projects}\r\n                    todos={todos}\r\n                    createTodo={(project, user, text) =>\r\n                      this.createTodo(project, user, text)\r\n                    }\r\n                    deleteTodo={(id) => this.deleteTodo(id)}\r\n                    deleteProject={(id => this.deleteProject(id))}\r\n                    editTodo={(data, id) => this.editTodo(data, id)}\r\n                    admin={admin}\r\n                    editProject={(data, id) => this.editProject(data, id)}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                exact path=\"/todos\"\r\n                element={\r\n                  <Todos\r\n                    users={users}\r\n                    projects={projects}\r\n                    todos={todos}\r\n                    isAuthenticated={() => this.isAuthenticated()}\r\n                    deleteTodo={id => this.deleteTodo(id)}\r\n                    login={login}\r\n                    admin={admin}\r\n                  />\r\n                }\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/login\"\r\n                element={\r\n                  <LoginForm\r\n                    auth={(login, password) => this.auth(login, password)}\r\n                  />\r\n                }\r\n              />\r\n              <Route exact path=\"/\" element={<Navigate to=\"/todos\"/>}/>\r\n              <Route path=\"*\" element={<NotFound404/>}/>\r\n            </Routes>\r\n          </div>\r\n        </div>\r\n        <Footer/>\r\n      </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n","/**\r\n * Корень. Подключение глобальных стилей и скриптов для всего проекта\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./assets/global.css\";\r\n\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport {GeneralApp} from \"./GeneralApp\";\r\n\r\n/**\r\n * Корень развёртывания приложения. Подключение главного компонента\r\n * к элементу найденному по id root\r\n */\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GeneralApp/>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}