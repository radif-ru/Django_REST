{"version":3,"sources":["reportWebVitals.js","components/Header/Header.js","components/Users/UserItem.js","components/Users/UsersList.js","components/Users/Users.js","components/Projects/ProjectItem.js","components/Projects/ProjectsList.js","components/Projects/Projects.js","components/Todos/TodoItem.js","components/Todos/TodosList.js","components/Todos/Todos.js","components/Footer/logo.svg","components/Footer/Footer.js","components/NotFound404/NotFound404.js","components/Todos/TodoForm.js","components/Todos/TodosData.js","components/Projects/ProjectForm.js","components/Projects/ProjectData.js","components/Users/UserForm.js","components/Users/UserData.js","components/Users/UserPage.js","components/Projects/ProjectPage.js","components/Authorization/Authorization.js","scripts/getMyDateFormat.js","components/AsyncioAiohttp/AsyncioAiohttp.js","components/UploadImages/UploadImageForm.js","components/UploadImages/UploadImageData.js","components/UploadImages/UploadImages.js","GeneralApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Menu","props","isAuthenticated","logout","login","user","users","find","username","className","to","id","onClick","Header","this","PureComponent","UserItem","roles","firstName","lastName","middleName","email","birthdate","dateFormat","map","roleId","idx","role","UsersList","Users","ProjectItem","project","deleteProject","admin","name","target","rel","href","repository","userId","el","ProjectsList","projects","Projects","TodoItem","todo","deleteTodo","text","created","updated","TodosList","todos","Todos","Footer","domain","swaggerEndpoint","swaggerJsonEndpoint","swaggerYamlEndpoint","reDocEndpoint","RESTAPIEndpoint","graphQLEndpoint","tokenEndpoint","tokenRefreshEndpoint","adminEndpoint","src","logo","alt","NotFound404","currentPage","window","location","TodoForm","state","event","value","setState","createTodo","editTodo","toggleDetails","projectId","alert","preventDefault","onSubmit","handleSubmit","required","maxLength","placeholder","onChange","handleChange","defaultValue","hidden","item","type","TodosData","TodosDataEl","newToggleState","visible","ProjectForm","selectedOptions","usersId","i","length","push","createProject","editProject","allUsersId","data","otherUsers","filter","multiple","ProjectData","noData","UserForm","setNotification","getNotification","a","password","confirmPassword","createUser","editUser","autoComplete","minLength","size","pattern","min","max","UserData","dateJoined","lastLogin","UserPage","useParams","userTodos","userProjects","projUser","ProjectPage","projectTodos","LoginForm","auth","React","Component","i18n","AsyncioAiohttp","asyncioAiohttpEndpoint","limit","offset","getAsyncFishTodos","endpoint","getHeaders","handleErrors","headers","axios","get","response","catch","error","asyncFishTodos","asyncFish","UploadImageForm","uploadImage","url","height","width","files","file","editImage","createImage","resizeImage","toggleDetailsResize","FormData","append","accept","UploadImageData","visibleResize","uploadImages","deleteUploadImage","parentPictureObj","image","parentPicture","parentPictureUrl","picture","UploadImages","getUploadImages","uploadImagesEndpoint","results","createImageDataREST","post","resizeImageDataREST","imageResizeEndpoint","deleteUploadImageDataREST","delete","newImage","Object","keys","objectKey","index","editImageDataREST","patch","dayNames","monthNames","timeNames","GeneralApp","getToken","cookies","Cookies","token","getAllData","adminRole","setToken","console","log","set","path","getRolesDataSetREST","getRolesDataSetGraphQL","rolesEndpoint","getDataREST","getDataGraphQL","usersEndpoint","todosEndpoint","projectsEndpoint","createDataREST","projectOwnerRole","authUser","newUser","Date","editDataREST","newProject","newTodo","deleteDataREST","setAllData","queryGraphQL","query","rolesSet","allRoles","roleUsers","reduce","arr1","arr2","rolesArr","usersArr","usersSet","Set","rest","sort","b","uniqueProjectsIds","isAdmin","message","indexOf","request","status","notification","exact","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68214a8c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./Header.css\"\n\nimport React, {PureComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\n/**\n * Отображение меню, кнопок для пользователей - личный кабинет, войти, выйти -\n * в зависимости от авторизации\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nconst Menu = (props) => {\n\n  const {isAuthenticated, logout, login, users} = props;\n  // Авторизованный пользователь\n  const user = users.find(user => user.username === login)\n\n  return (\n    <nav className=\"menu\">\n      <ul>\n        <li>\n          <Link className=\"menu-link\" to=\"/users\">Пользователи</Link>\n        </li>\n        <li>\n          <Link className=\"menu-link\" to=\"/projects\">Проекты</Link>\n        </li>\n        <li>\n          <Link className=\"menu-link\" to=\"/todos\">Заметки</Link>\n        </li>\n        <li>\n          <Link className=\"menu-link\" to=\"/asyncio-aiohttp\">\n            AsyncIO/Aiohttp\n          </Link>\n        </li>\n        <li>\n          <Link className=\"menu-link\" to=\"/upload-images\">\n            Upload Images\n          </Link>\n        </li>\n        {isAuthenticated() && user &&\n        <li>\n          <Link\n            className=\"menu-link\"\n            to={`/users/${user.id}`}\n          >\n            ЛК | {login}\n          </Link>\n        </li>\n        }\n        {isAuthenticated()\n          ? <li>\n            <span className=\"menu-link menu-logout\" onClick={() => logout()}>\n              Выйти\n            </span>\n          </li>\n          : <li>\n            <Link className=\"menu-link menu-login\" to=\"/login\">Войти</Link>\n          </li>\n        }\n\n        {!isAuthenticated() &&\n        <li>\n          <Link className=\"menu-link menu-login\" to=\"/registration\">\n            Регистрация\n          </Link>\n        </li>\n        }\n      </ul>\n    </nav>\n  )\n}\n\n/**\n * Работа с заголовком страницы\n */\nexport class Header extends PureComponent {\n\n  render() {\n\n    const {isAuthenticated, logout, login, users} = this.props;\n\n    return (\n      <header className=\"header\">\n        <Menu\n          isAuthenticated={isAuthenticated}\n          logout={logout}\n          login={login}\n          users={users}\n        />\n      </header>\n    )\n  }\n}\n","import {PureComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport dateFormat from \"dateformat\";\n\n\n/**\n * Заполнение ячеек пользователей\n */\nexport class UserItem extends PureComponent {\n\n  render() {\n\n    const {user, roles} = this.props;\n\n    return (\n      <tr>\n        <td>\n          <Link to={`/users/${user.id}`}>{user.username}</Link>\n        </td>\n        <td>\n          {user.firstName}\n        </td>\n        <td>\n          {user.lastName}\n        </td>\n        <td>\n          {user.middleName}\n        </td>\n        <td>\n          {user.email}\n        </td>\n        <td>\n          {user.birthdate && dateFormat(user.birthdate, \"dddd, d mmmm, yyyy года\")}\n        </td>\n        <td>\n          {user.roles.map(\n            (roleId, idx) =>\n              <span key={idx}>\n               {roles.find(role => role.id === roleId).role}\n                <br/>\n             </span>\n          )}\n        </td>\n      </tr>\n    )\n  }\n}","import {PureComponent} from \"react\";\r\nimport {UserItem} from \"./UserItem\";\r\n\r\n\r\n/**\r\n * Формирование заголовков таблицы и данных для заполнения ячеек\r\n */\r\nexport class UsersList extends PureComponent {\r\n\r\n  render() {\r\n    const {users, roles} = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <h3>Пользователи</h3>\r\n        <table className=\"table\">\r\n          <thead>\r\n          <tr>\r\n            <th>\r\n              Login\r\n            </th>\r\n            <th>\r\n              Имя\r\n            </th>\r\n            <th>\r\n              Фамилия\r\n            </th>\r\n            <th>\r\n              Отчество\r\n            </th>\r\n            <th>\r\n              Email\r\n            </th>\r\n            <th>\r\n              Дата рождения\r\n            </th>\r\n            <th>\r\n              Роли\r\n            </th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {users.map((user, idx) =>\r\n            <UserItem key={idx} user={user} roles={roles}/>\r\n          )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Users.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport {UsersList} from \"./UsersList\";\r\n\r\n\r\n/**\r\n * Работа с пользователями\r\n */\r\nexport class Users extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {users, roles} = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <UsersList users={users} roles={roles}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import {Link} from \"react-router-dom\";\r\n\r\n\r\n/**\r\n * Заполнение ячеек проектов, формирование авторов для каждого проекта\r\n * @param props {object} - Данные, переданные родителем\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport const ProjectItem = (props) => {\r\n\r\n  const {project, users, deleteProject, isAuthenticated, login, admin} = props;\r\n  const user = users.find(user => user.username === login);\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <Link to={`/projects/${project.id}`}>{project.name}</Link>\r\n      </td>\r\n      <td>\r\n        <a target=\"_blank\" rel=\"noreferrer\" href={project.repository}>\r\n          {project.repository}\r\n        </a>\r\n      </td>\r\n      <td>\r\n        {project.users.map((userId, idx) => <span key={idx}>\r\n          <Link to={`/users/${userId}`}>\r\n            {users.find(user => user.id === userId).username}\r\n          </Link><br/>\r\n        </span>)}\r\n      </td>\r\n      {isAuthenticated() && (project.users.find(el => el === user.id) || admin) &&\r\n      <td className=\"btn btn-outline-danger\">\r\n        <div onClick={() => deleteProject(project.id)}>Del</div>\r\n      </td>\r\n      }\r\n    </tr>\r\n  )\r\n}\r\n","import {PureComponent} from \"react\";\n\nimport {ProjectItem} from \"./ProjectItem\";\n\n\n/**\n * Формирование заголовков таблицы и данных для заполнения ячеек\n */\nexport class ProjectsList extends PureComponent {\n\n  render() {\n    const {\n      projects, users, deleteProject, login, isAuthenticated, admin\n    } = this.props\n\n    return (\n      <div>\n        <h3>Проекты</h3>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th>\n              Имя\n            </th>\n            <th>\n              Репозиторий\n            </th>\n            <th>\n              Авторы\n            </th>\n            {isAuthenticated() && <th> </th>}\n          </tr>\n          </thead>\n          <tbody>\n          {projects.map((project, idx) =>\n            <ProjectItem\n              key={idx}\n              project={project}\n              users={users}\n              login={login}\n              isAuthenticated={isAuthenticated}\n              deleteProject={deleteProject}\n              admin={admin}\n            />\n          )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import \"./Projects.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport {ProjectsList} from \"./ProjectsList\";\r\n\r\n\r\n/**\r\n * Работа с проектами\r\n */\r\nexport class Projects extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const {\r\n      users, projects, deleteProject, isAuthenticated, login, admin\r\n    } = this.props\r\n\r\n    return (\r\n      <ProjectsList\r\n        users={users}\r\n        projects={projects}\r\n        deleteProject={deleteProject}\r\n        isAuthenticated={isAuthenticated}\r\n        login={login}\r\n        admin={admin}\r\n      />\r\n    )\r\n  }\r\n}\r\n","import {PureComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\n/**\n * Формирование данных. Заполнение ячеек заметок\n * По заметке определяются пользователь и проект, кому она принадлежит\n * У авторизованных пользователей есть возможность удалять заметки,\n * но только свои\n */\nexport class TodoItem extends PureComponent {\n\n  render() {\n    const {\n      todo, users, projects, deleteTodo, isAuthenticated, login, admin\n    } = this.props;\n    const user = users.find(user => user.id === todo.user);\n    const project = projects.find(project => project.id === todo.project);\n\n    return (\n      <tr>\n        <td>\n          {todo.text}\n        </td>\n        <td>\n          <Link to={`/users/${user.id}`}>{user.username}</Link>\n        </td>\n        <td>\n          <Link to={`/projects/${todo.project}`}>{project.name}</Link>\n        </td>\n        <td>\n          {todo.created}\n        </td>\n        <td>\n          {todo.updated !== todo.created ? todo.updated : \"---\"}\n        </td>\n        {isAuthenticated() && (user.username === login || admin) &&\n        <td className=\"btn btn-outline-danger\">\n          <div onClick={() => deleteTodo(todo.id)}>Del</div>\n        </td>\n        }\n      </tr>\n    )\n  }\n}\n","import {PureComponent} from \"react\";\n\nimport {TodoItem} from \"./TodoItem\";\n\n\n/**\n * Формирование заголовков таблицы и данных для заполнения ячеек\n * Для авторизованных появляется поле удаления заметки, но кнопка удаления\n * отображается только у владельцев заметок\n */\nexport class TodosList extends PureComponent {\n\n  render() {\n    const {\n      users, projects, todos, deleteTodo, isAuthenticated, login, admin\n    } = this.props;\n\n    return (\n      <div>\n        <h3>Заметки</h3>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th>\n              Текст\n            </th>\n            <th>\n              Автор\n            </th>\n            <th>\n              Проект\n            </th>\n            <th>\n              Добавлена\n            </th>\n            <th>\n              Обновлена\n            </th>\n            {isAuthenticated() && <th> </th>}\n          </tr>\n          </thead>\n          <tbody>\n          {todos.map((todo, idx) =>\n            <TodoItem\n              key={idx}\n              todo={todo}\n              users={users}\n              projects={projects}\n              deleteTodo={deleteTodo}\n              isAuthenticated={isAuthenticated}\n              login={login}\n              admin={admin}\n            />\n          )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import \"./Todos.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport {TodosList} from \"./TodosList\";\r\n\r\n\r\n/**\r\n * Работа с заметками\r\n */\r\nexport class Todos extends PureComponent {\r\n\r\n  render() {\r\n    const {\r\n      users, projects, todos, deleteTodo, isAuthenticated, login, admin\r\n    } = this.props;\r\n\r\n    return (\r\n      <TodosList\r\n        users={users}\r\n        projects={projects}\r\n        todos={todos}\r\n        deleteTodo={deleteTodo}\r\n        isAuthenticated={isAuthenticated}\r\n        login={login}\r\n        admin={admin}\r\n      />\r\n    )\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import \"./Footer.css\"\nimport logo from \"./logo.svg\";\n\nimport React, {PureComponent} from \"react\";\n\n\n/**\n * Формирование нижней части страницы\n */\nexport class Footer extends PureComponent {\n\n  render() {\n\n    const {\n      domain, swaggerEndpoint,\n      swaggerJsonEndpoint, swaggerYamlEndpoint, reDocEndpoint, RESTAPIEndpoint,\n      graphQLEndpoint, tokenEndpoint, tokenRefreshEndpoint, adminEndpoint\n    } = this.props\n\n    return (\n      <footer className=\"footer\">\n        <div>\n          <h5>\n            <a className=\"App-link\"\n               href={domain}\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n            >\n              Работа с бэкендом:\n            </a>\n          </h5>\n          <a className=\"App-link\"\n             href={`${domain}${swaggerEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            Swagger\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${reDocEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            ReDoc\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${RESTAPIEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            Django REST API\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${graphQLEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            GraphiQL\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${adminEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            Админка\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${tokenEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            Генерация токена\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${tokenRefreshEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            Обновить токен\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${swaggerJsonEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            REST API в Json\n            <span> / </span>\n          </a>\n          <a className=\" App-link\"\n             href={`${domain}${swaggerYamlEndpoint}`}\n             target=\"_blank\"\n             rel=\"noopener noreferrer\"\n          >\n            REST API в YAML\n            <span> / </span>\n          </a>\n        </div>\n        <a\n          className=\" App-link\"\n          href=\" https://radif.ru\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          &copy; 2021 &reg;Radif.ru\n        </a>\n        <br/>\n        <div className=\"footer-modal\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        </div>\n      </footer>\n    )\n  }\n}\n","import \"./NotFound404.css\"\r\n\r\nimport React, {PureComponent} from \"react\";\r\n\r\n\r\n/**\r\n * Обработка переходов на несуществующие страницы\r\n */\r\nexport class NotFound404 extends PureComponent {\r\n\r\n  render() {\r\n\r\n    const currentPage = window.location.href;\r\n\r\n    return (\r\n      <div>\r\n        <h2>Данная страница недоступна! </h2>\r\n        <p>Неправильный путь: <b>{currentPage}</b></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./Todos.css\"\n\nimport {PureComponent} from \"react\";\n\n\n/**\n * Создание и обработка формы создания заметки\n */\nexport class TodoForm extends PureComponent {\n  /**\n   * Прокидывание свойств (props) от родителя, начальное состояние текста\n   * @param props {object} Данные, переданные родителем\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"text\": this.props.text,\n      \"projectId\": \"\"\n    }\n  }\n\n  /**\n   * Присваивание состояний на основе события изменения поля ввода формы\n   * @param event {object} Событие, оттуда извлекаются имя и значения текста\n   */\n  handleChange(event) {\n    const {name, value} = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /**\n   * Присваивание состояний на основе события обработки отправки данных в форме\n   * Создание или редактирование данных в зависимости от переданных свойств.\n   * Валидация данных.\n   * @param event {object} Используется только для остановки события\n   */\n  handleSubmit(event) {\n    const {text} = this.state;\n    const {\n      users, login, createTodo, editTodo, todo, toggleDetails, todos\n    } = this.props;\n\n    const projectId = this.props.projectId\n      ? this.props.projectId\n      : this.state.projectId\n\n    const user = users && users.find(user => user.username === login);\n\n    if (todos.find(todo =>\n      todo.text === text && todo.project === projectId && todo.user === user.id\n    )) {\n      alert(\"Запрещено одному и тому же пользователю оставлять 2 одинаковые \" +\n        \"заметки к одному проекту! Отредактируйте текст\");\n      event.preventDefault();\n      return\n    }\n\n    if (editTodo) {\n      const data = {\n        \"text\": text\n      }\n      editTodo(data, todo.id);\n      toggleDetails();\n      event.preventDefault();\n      return\n    }\n\n    const data = {\n      \"project\": +projectId,\n      \"user\": +user.id,\n      \"text\": text\n    }\n    createTodo(data);\n    this.setState({\n      \"text\": \"\",\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * При передаче свойства projects, формируется список проектов, появляется\n   * возможность выбора проекта, к которому оставляется заметка.\n   * Вызов методов this.handleChange и this.handleSubmit при событиях изменения\n   * поля ввода и отправки данных соответственно\n   * @returns {JSX.Element}\n   */\n  render() {\n    const {text} = this.state;\n    const {projects} = this.props\n\n    return (\n      <div>\n        <form\n          onSubmit={(event => this.handleSubmit(event))}\n          className=\"row todo-form\"\n        >\n          <div className=\"col-5\">\n          <textarea\n            required\n            maxLength=\"333\"\n            name=\"text\"\n            placeholder=\"Текст\"\n            aria-describedby=\"textHelpInline\"\n            value={text}\n            className=\"form-control todos__form-text-area\"\n            onChange={(event => this.handleChange(event))}\n          />\n            <span id=\"textHelpInline\" className=\"form-text\">\n            Введите текст вашей заметки к проекту\n          </span>\n          </div>\n          {projects &&\n          <div className=\"col-3\">\n            <select\n              required\n              name=\"projectId\"\n              className=\"form-control form-select todos__form-select\"\n              aria-describedby=\"textHelpSelect\"\n              placeholder=\"Проекты\"\n              onChange={(event) =>\n                this.handleChange(event)\n              }\n            >\n              <option value=\"\" defaultValue=\"\" hidden>Список проектов</option>\n              {projects.map((item, idx) =>\n                <option value={item.id} key={idx}>\n                  {item.name}\n                </option>)\n              }\n            </select>\n            <span id=\"textHelpSelect\" className=\"form-text\">\n                Выберете проект, к которому хотите оставить заметку\n              </span>\n          </div>\n          }\n          <input\n            type=\"submit\"\n            value=\"Сохранить\"\n            className=\"auth-btn btn btn-primary col-2\"\n          />\n        </form>\n      </div>\n    )\n  }\n}\n","import \"./Todos.css\"\n\nimport {PureComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {TodoForm} from \"./TodoForm\";\n\n\n/**\n * Данные заметок. Проброс свойств к каждой заметке отдельно\n */\nexport class TodosData extends PureComponent {\n\n  render() {\n\n    const {\n      todos, users, projects, login, isAuthenticated, deleteTodo, editTodo,\n      admin\n    } = this.props\n\n    return (\n      <div className=\"todos-data\">\n        {todos.map((todo, idx) =>\n          <TodosDataEl\n            key={idx}\n            todo={todo}\n            users={users}\n            projects={projects}\n            login={login}\n            isAuthenticated={isAuthenticated}\n            deleteTodo={deleteTodo}\n            editTodo={editTodo}\n            todos={todos}\n            admin={admin}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\n\n/**\n * Работа с каждой заметкой отдельно. Показ и скрытие формы заметки в\n * зависимости от авторизованности пользователя и авторства.\n * Возможность редактирования и удаления своих заметок\n */\nclass TodosDataEl extends PureComponent {\n  /**\n   * Изначально состояние видимости включено\n   * @param props.visible {Boolean}\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: true\n    }\n  }\n\n  /**\n   * Переключатель видимого и невидимого состояния элементов\n   */\n  toggleDetails = () => {\n    const newToggleState = !this.state.visible\n    this.setState({visible: newToggleState})\n  }\n\n  render() {\n    const {\n      todo, users, projects, login, isAuthenticated, deleteTodo, editTodo,\n      todos, admin\n    } = this.props\n    const {visible} = this.state\n    const user = users.find(user => user.username === login)\n    return (\n      <div>\n        {visible && <span className=\"comment\">{todo.text}</span>}\n\n        {isAuthenticated() && (todo.user === user.id || admin) &&\n        <div>\n            <span\n              onClick={this.toggleDetails}\n              className=\"btn btn-outline-secondary\"\n            >\n          {!visible ? \"Отменить\" : \"Изменить текст\"}\n            </span>\n          {!visible &&\n          <div>\n            Отредактировать тест:\n            <TodoForm\n              todo={todo}\n              text={todo.text}\n              editTodo={editTodo}\n              toggleDetails={() => this.toggleDetails()}\n              todos={todos}\n            />\n          </div>\n          }\n        </div>\n        }\n\n        <div className=\"comment-info\">\n          <Link className=\"comment-user\" to={`/users/${todo.user}`}>\n            {users.find(user => user.id === todo.user).username}\n          </Link>\n\n          <span>=> </span>\n\n          <Link\n            className=\"comment-user\"\n            to={`/projects/${projects.find(project =>\n              project.id === todo.project).id}`\n            }\n          >\n            {projects.find(project => project.id === todo.project).name}\n          </Link>\n\n          <span className=\"comment-datetime\">{todo.created}. </span>\n\n          <span className=\"comment-datetime\">\n            {todo.created !== todo.updated &&\n            <span className=\"comment-updated\">Обновлено: {todo.updated}</span>}\n          </span>\n\n          {isAuthenticated() && (todo.user === user.id || admin) &&\n          <div>\n            <span className=\"btn btn-outline-danger\">\n              <span onClick={() => deleteTodo(todo.id)}>Удалить заметку</span>\n            </span>\n          </div>\n          }\n        </div>\n        <hr/>\n      </div>\n    )\n  }\n}\n","import \"./Projects.css\"\n\nimport {PureComponent} from \"react\";\n\n\n/**\n * Создание и обработка формы создания проекта\n * При создании проекта пользователь обязательно попадает в список авторов,\n * но может указать соавторов дополнительно\n */\nexport class ProjectForm extends PureComponent {\n  /**\n   * Прокидывание свойств (props) от родителя, начальное состояние текста\n   * @param props {object} Данные, переданные родителем\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"name\": this.props.project ? this.props.project.name : \"\",\n      \"repository\": this.props.project ? this.props.project.repository : \"\",\n      \"usersId\": this.props.project ? this.props.project.users : \"\"\n    }\n  }\n\n  /**\n   * Присваивание состояний на основе события изменения поля ввода формы\n   *\n   * @param event {object} Событие, оттуда извлекаются данные проекта\n   */\n  handleChange(event) {\n    const {name, value} = event.target;\n    // Авторы\n    if (event.target.selectedOptions) {\n      let usersId = [];\n      for (let i = 0; i < event.target.selectedOptions.length; i++) {\n        usersId.push(+event.target.selectedOptions.item(i).value);\n      }\n      this.setState({\n        \"usersId\": usersId\n      });\n      return\n    }\n    // Имя и репозиторий\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /**\n   * Присваивание состояний на основе события обработки отправки данных в форме\n   * К авторам добавляется создатель проекта\n   * @param event {object} Используется только для остановки события\n   */\n  handleSubmit(event) {\n    const {name, repository, usersId} = this.state;\n    const {\n      users, login, createProject, editProject, project, toggleDetails,\n      projects\n    } = this.props;\n    const user = users && users.find(user => user.username === login);\n    const allUsersId = [...usersId, user.id]\n    const data = {\n      \"name\": name,\n      \"repository\": repository,\n      \"users\": allUsersId\n    }\n\n    if (projects.find(el =>\n      el.name === name && el.repository === repository && el.users === usersId\n    )) {\n      alert(\"Запрещено создавать 2 проекта с совпадающими именем, \" +\n        \"репозиторием и авторами! Отредактируйте данные или измените авторов\");\n      event.preventDefault();\n      return\n    }\n\n    if (editProject) {\n      editProject(data, project.id);\n      toggleDetails();\n      event.preventDefault();\n      return\n    }\n    createProject(data);\n    this.setState({\n      \"name\": \"\",\n      \"repository\": \"\",\n      \"users\": \"\",\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Отображение формы. В качестве соавторов можно выбрать всех, кроме себя\n   * @returns {JSX.Element}\n   */\n  render() {\n    const {name, repository} = this.state;\n    const {users, login, project} = this.props;\n    const user = users.find(user => user.username === login);\n    const otherUsers = users.filter(el => el.id !== user.id);\n\n    return (\n      <form\n        onSubmit={(event => this.handleSubmit(event))}\n        className=\"row todo-form\"\n      >\n        <div className=\"col-3\">\n          <input\n            required\n            type=\"text\"\n            name=\"name\"\n            maxLength=\"33\"\n            placeholder=\"Имя\"\n            aria-describedby=\"textHelpInline\"\n            value={name}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpInline\" className=\"form-text\">\n            Введите имя проекта\n          </span>\n        </div>\n        <div className=\"col-4\">\n          <input\n            required\n            type=\"url\"\n            name=\"repository\"\n            maxLength=\"99\"\n            placeholder=\"url-адрес репозитория\"\n            aria-describedby=\"textHelpInline\"\n            value={repository}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpInline\" className=\"form-text\">\n            Введите url-адрес репозитория\n          </span>\n        </div>\n\n        <div className=\"col-3\">\n          <select\n            multiple\n            defaultValue={project && project.users}\n            name=\"usersId\"\n            className=\"form-control form-select\"\n            aria-describedby=\"textHelpSelect\"\n            placeholder=\"Пользователи\"\n            onChange={(event) =>\n              this.handleChange(event)\n            }\n          >\n            {otherUsers.map((user, idx) =>\n                <option value={user.id} key={idx}>\n                  {user.username}\n                </option>\n            )}\n          </select>\n          <span id=\"textHelpSelect\" className=\"form-text\">\n            Добавьте тех, кто так же работают с проектом\n          </span>\n        </div>\n\n        <input\n          type=\"submit\"\n          value=\"Сохранить\"\n          className=\"auth-btn btn btn-primary col-2\"\n        />\n      </form>\n    )\n  }\n}\n","import \"./Projects.css\"\n\nimport {PureComponent} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport {ProjectForm} from \"./ProjectForm\";\n\n\n/**\n * Компонент данных проекта\n */\nexport class ProjectData extends PureComponent {\n  /**\n   * Изначально состояние видимости включено\n   * @param props.visible {Boolean}\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: true\n    }\n  }\n\n  /**\n   * Переключатель видимого и невидимого состояния элементов\n   */\n  toggleDetails = () => {\n    const newToggleState = !this.state.visible\n    this.setState({visible: newToggleState})\n  }\n\n  render() {\n\n    const {\n      project, users, login, isAuthenticated, deleteProject, admin,\n      editProject, projects\n    } = this.props\n    const {visible} = this.state\n    const user = users.find(user => user.username === login);\n\n    const noData = \"нет данных!\";\n\n    return (\n      <div className=\"project-data-set\">\n        {visible &&\n        <div>\n          <p>\n            <span>Имя: </span>\n            <span\n              className=\"project-data\">{\n              <Link to={`/projects/${project.id}`}>\n                {project.name || noData}\n              </Link>\n            }\n            </span>\n          </p>\n          <p>\n            <span>Репозиторий: </span>\n            <span className=\"project-data\">\n          <a href={project.repository} target=\"_blank\" rel=\"noreferrer\">\n            {project.repository || noData}\n          </a>\n          </span>\n          </p>\n\n          <p>\n            <span>Работают с проектом: </span>\n            <span className=\"project-data\">\n            {project.users.map((user, idx) =>\n              <span key={idx}>\n                <Link to={`/users/${user}`}>\n                  {users.find(data => data.id === user).username}\n                </Link>\n                <span>, </span>\n              </span>\n            )}\n          </span>\n          </p>\n        </div>\n        }\n\n        {isAuthenticated() && (project.users\n          .find(el => el === user.id) || admin) &&\n        <div>\n            <span\n              onClick={this.toggleDetails}\n              className=\"btn btn-outline-secondary\"\n            >\n          {!visible ? \"Отменить\" : \"Изменить данные\"}\n            </span>\n          {!visible &&\n          <div>\n            Отредактировать поля:\n            <ProjectForm\n              users={users}\n              project={project}\n              login={login}\n              editProject={editProject}\n              toggleDetails={() => this.toggleDetails()}\n              projects={projects}\n            />\n          </div>\n          }\n        </div>\n        }\n\n        <p>\n          <span>Проект создан: </span>\n          <span className=\"project-data\">\n              {project.created}\n          </span>\n        </p>\n\n        <p>\n          <span>Проект обновлён: </span>\n          <span className=\"project-data project-data-updated\">\n              {project.created !== project.updated\n                ? `${project.updated}`\n                : \"---\"\n              }\n          </span>\n        </p>\n        {isAuthenticated() && (project.users\n          .find(el => el === user.id) || admin) &&\n        <div className=\"btn btn-outline-danger\">\n          <div onClick={() => deleteProject(project.id)}>Удалить!</div>\n        </div>\n        }\n        <hr/>\n      </div>\n    )\n  }\n}","import \"./Users.css\"\n\nimport {PureComponent} from \"react\";\n\n\n/**\n * Создание и обработка формы регистрации пользователя\n */\nexport class UserForm extends PureComponent {\n  /**\n   * Прокидывание свойств (props) от родителя, начальные состояния\n   * @param props {object} Данные, переданные родителем\n   * @param props.roles {Array} Роли пользователей\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"username\": props.user ? props.user.username : \"\",\n      \"password\": \"\",\n      \"confirmPassword\": \"\",\n      \"firstName\": props.user ? props.user.firstName : \"\",\n      \"lastName\": props.user ? props.user.lastName : \"\",\n      \"middleName\": props.user ? props.user.middleName : \"\",\n      \"email\": props.user ? props.user.email : \"\",\n      \"birthdate\": props.user ? props.user.birthdate : \"\",\n      \"roles\": props.user ? props.user.roles : \"\"\n    }\n  }\n\n  /**\n   * Вызывается сразу после монтирования (то есть, вставки компонента в DOM).\n   * Обнуление уведомления.\n   */\n  componentDidMount() {\n    const {setNotification} = this.props\n    setNotification(\"\")\n  }\n\n  /**\n   *  Вызывается сразу после обновления. Не вызывается при первом рендере.\n   *  Обработка уведомления. Если пришло, значит регистрация прошла успешно\n   */\n  componentDidUpdate() {\n    const {getNotification, setNotification} = this.props\n    const text = getNotification()\n    if (!!text) {\n      alert(`${text} \\nИспользуйте логин и пароль для входа в ЛК!`);\n      setNotification(\"\");\n      this.setState({\n        \"username\": \"\",\n        \"password\": \"\",\n        \"confirmPassword\": \"\",\n        \"firstName\": \"\",\n        \"lastName\": \"\",\n        \"middleName\": \"\",\n        \"email\": \"\",\n        \"birthdate\": \"\",\n        \"roles\": \"\"\n      })\n    }\n  }\n\n\n  /**\n   * Присваивание состояний на основе события изменения поля ввода формы\n   * @param event {object} Событие, оттуда извлекаются данные пользователя\n   */\n  handleChange(event) {\n    const {name, value} = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /**\n   * Присваивание состояний на основе события обработки отправки данных в форме\n   * Валидация данных. Присвоение роли разработчика по умолчанию.\n   * @param event {object} Используется только для остановки события\n   */\n  async handleSubmit(event) {\n    const {\n      username, password, confirmPassword, firstName, lastName, middleName,\n      email, birthdate\n    } = this.state;\n    const {createUser, roles, editUser, toggleDetails, user} = this.props;\n    if (password !== confirmPassword) {\n      alert(\"Пароли не совпадают!\");\n      event.preventDefault();\n      return\n    }\n    const data = {\n      \"username\": username,\n      \"password\": password,\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"middleName\": middleName,\n      \"email\": email,\n      \"birthdate\": birthdate,\n      \"roles\": [+roles.find(role => role.role === \"разработчик\").id, ...user.roles]\n    }\n\n    if (editUser) {\n      editUser(data, user.id);\n      toggleDetails();\n      event.preventDefault();\n      return\n    }\n\n    createUser(data)\n    event.preventDefault();\n  }\n\n  /**\n   * Вызов методов this.handleChange и this.handleSubmit при событиях изменения\n   * поля ввода и отправки данных соответственно\n   * @returns {JSX.Element}\n   */\n  render() {\n    const {\n      username, password, confirmPassword, firstName, lastName, middleName,\n      email, birthdate\n    } = this.state;\n\n    return (\n      <div>\n        <form\n          onSubmit={(event => this.handleSubmit(event))}\n          className=\"row todo-form\"\n        >\n          <legend>Данные пользователя:</legend>\n          <div className=\"col-4\">\n            <input\n              required\n              type=\"text\"\n              name=\"username\"\n              maxLength=\"44\"\n              placeholder=\"Login\"\n              aria-describedby=\"usernameHelpInline\"\n              value={username}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"usernameHelpInline\" className=\"form-text\">\n              <span className=\"sure\">*</span>\n              Введите уникальный login\n            </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              required\n              type=\"password\"\n              autoComplete=\"on\"\n              minLength=\"8\"\n              size=\"10\"\n              name=\"password\"\n              maxLength=\"44\"\n              placeholder=\"Password\"\n              aria-describedby=\"passwordHelpInline\"\n              value={password}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"passwordHelpInline\" className=\"form-text\">\n              <span className=\"sure\">*</span>\n              Придумайте пароль. Он не хранится в открытом виде.\n              Ваши данные защищены даже от администрации.\n           </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              required\n              type=\"password\"\n              autoComplete=\"on\"\n              minLength=\"8\"\n              size=\"10\"\n              name=\"confirmPassword\"\n              maxLength=\"44\"\n              placeholder=\"Подтвердите\"\n              aria-describedby=\"confirmPasswordHelpInline\"\n              value={confirmPassword}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"confirmPasswordHelpInline\" className=\"form-text\">\n              <span className=\"sure\">*</span>\n              Подтвердите пароль\n            </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              maxLength=\"44\"\n              placeholder=\"Имя\"\n              aria-describedby=\"firstNameHelpInline\"\n              value={firstName}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"firstNameHelpInline\" className=\"form-text\">\n              Ваше имя\n            </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              type=\"text\"\n              name=\"lastName\"\n              maxLength=\"55\"\n              placeholder=\"Фамилия\"\n              aria-describedby=\"lastNameHelpInline\"\n              value={lastName}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"lastNameHelpInline\" className=\"form-text\">\n             Фамилия\n            </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              type=\"text\"\n              name=\"middleName\"\n              maxLength=\"66\"\n              placeholder=\"Отчество\"\n              aria-describedby=\"textHelpInline\"\n              value={middleName}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"middleNameHelpInline\" className=\"form-text\">\n             Отчество\n            </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              required\n              type=\"email\"\n              pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n              name=\"email\"\n              placeholder=\"Email\"\n              aria-describedby=\"textHelpInline\"\n              value={email}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"middleNameHelpInline\" className=\"form-text\">\n              <span className=\"sure\">*</span>\n             Ваш уникальный электронный адрес\n           </span>\n          </div>\n          <div className=\"col-4\">\n            <input\n              required\n              type=\"date\"\n              min=\"1900-12-01\"\n              max=\"2003-12-01\"\n              name=\"birthdate\"\n              placeholder=\"День рождения\"\n              aria-describedby=\"birthdateHelpInline\"\n              value={birthdate}\n              className=\"form-control\"\n              onChange={(event => this.handleChange(event))}\n            />\n            <span id=\"birthdateHelpInline\" className=\"form-text\">\n              <span className=\"sure\">*</span>\n              Дата рождения\n            </span>\n          </div>\n\n          <input\n            type=\"submit\"\n            value=\"Сохранить\"\n            className=\"auth-btn btn btn-primary col-4\"\n          />\n        </form>\n      </div>\n    )\n  }\n}\n","import \"./Users.css\"\n\nimport {PureComponent} from \"react\";\n\nimport {UserForm} from \"./UserForm\";\nimport dateFormat from \"dateformat\";\n\n\n/**\n * Компонент данных пользователя\n */\nexport class UserData extends PureComponent {\n  /**\n   * Изначально состояние видимости включено\n   * @param props.visible {Boolean}\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: true\n    }\n  }\n\n  /**\n   * Переключатель видимого и невидимого состояния элементов\n   */\n  toggleDetails = () => {\n    const newToggleState = !this.state.visible\n    this.setState({visible: newToggleState})\n  }\n\n  render() {\n\n    const {\n      user, roles, editUser, setNotification, getNotification, isAuthenticated,\n      login, admin\n    } = this.props;\n    const {visible} = this.state;\n\n    const noData = \"нет данных!\";\n\n    return (\n      <div>\n        {visible &&\n        <div>\n          <div>\n            <span>Login: </span>\n            <span className=\"user-data\">{user.username}</span>\n          </div>\n          <div>\n            <span>Имя: </span>\n            <span className=\"user-data\">{user.firstName || noData}</span>\n          </div>\n          <div>\n            <span>Фамилия: </span>\n            <span className=\"user-data\">{user.lastName || noData}</span>\n          </div>\n          <div>\n            <span>Отчество: </span>\n            <span className=\"user-data\">{user.middleName || noData}</span>\n          </div>\n          <div>\n            <span>Электронная почта: </span>\n            <a href={`malito:${user.email}`} className=\"user-data\">\n              {user.email}\n            </a>\n          </div>\n          <div>\n            <span>Дата рождения: </span>\n            <span className=\"user-data\">\n              {user.birthdate\n                ? dateFormat(user.birthdate, \"dddd, d mmmm, yyyy года\")\n                : noData}\n          </span>\n          </div>\n          <div>\n            <span>Роли пользователя: </span>\n            {user.roles.map((roleId, idx) =>\n              <span key={idx} className=\"user-data\"> | {\n                roles.find(role => role.id === roleId) && roles\n                  .find(role => role.id === roleId).role\n              } |</span>\n            )}\n          </div>\n          <div>\n            <span>Зарегистрировался(-ась): </span>\n            <span className=\"user-data\">{user.dateJoined || \"---\"}</span>\n          </div>\n          <div>\n            <span>Последний раз заходил(-а): </span>\n            <span className=\"user-data\">{user.lastLogin || \"---\"}</span>\n          </div>\n          <div>\n            <span>Данные обновлены: </span>\n            <span className=\"user-data user-data-updated\">\n                {user.updated !== user.dateJoined ? user.updated : \"---\"}\n            </span>\n          </div>\n        </div>\n        }\n        {isAuthenticated() && (user.username === login || admin) &&\n        <div>\n            <span\n              onClick={this.toggleDetails}\n              className=\"btn btn-outline-secondary\"\n            >\n          {!visible ? \"Отменить\" : \"Изменить данные\"}\n            </span>\n          {!visible &&\n          <div>\n            <UserForm\n              roles={roles}\n              user={user}\n              getNotification={getNotification}\n              setNotification={setNotification}\n              toggleDetails={() => this.toggleDetails()}\n              editUser={editUser}\n            />\n          </div>\n          }\n        </div>\n        }\n      </div>\n    )\n  }\n}","import \"./Users.css\"\n\nimport {useParams} from \"react-router-dom\";\n\nimport {TodosData} from \"../Todos/TodosData\";\nimport {TodoForm} from \"../Todos/TodoForm\";\nimport {ProjectData} from \"../Projects/ProjectData\";\nimport {ProjectForm} from \"../Projects/ProjectForm\";\nimport {UserData} from \"./UserData\";\n\n\n/**\n * Личный кабинет пользователя\n * @param props {object} Свойства переданные родителем\n * @returns {JSX.Element}\n * @constructor\n */\nexport const UserPage = (props) => {\n  let {id} = useParams();\n  id = +id;\n  const {\n    roles, users, projects, todos, isAuthenticated, login, createTodo,\n    createProject, deleteTodo, deleteProject, editTodo, admin, editProject,\n    editUser, getNotification, setNotification\n  } = props;\n  const user = users.find((user) => user.id === id);\n\n  const userTodos = todos.filter(todo => todo.user === id);\n\n  const userProjects = projects.filter(\n    project => project.users.find(projUser => projUser === id)\n  );\n\n  return (\n    <div>\n      {user &&\n      <div className=\"user\">\n\n        <UserData\n          user={user}\n          roles={roles}\n          editUser={editUser}\n          getNotification={getNotification}\n          setNotification={setNotification}\n          isAuthenticated={isAuthenticated}\n          login={login}\n          admin={admin}\n        />\n\n        {isAuthenticated() && user.username === login &&\n        <h4 className=\"user-create-title\">Создать:\n          <span> </span>\n          <a href=\"#project\">Проект</a>\n          <span> </span>\n          <a href=\"#todo\">Заметку</a>\n        </h4>\n        }\n\n        <div id=\"project\">\n          <br/>\n          <br/>\n        </div>\n\n        {isAuthenticated() && user.username === login &&\n          <div>\n            <h3>Создать проект</h3>\n            <ProjectForm\n              users={users}\n              projects={projects}\n              login={login}\n              createProject={createProject}\n            />\n          </div>\n        }\n\n        <h3 className=\"user-title\">Проекты пользователя: </h3>\n        <br/>\n\n        {userProjects.map((project, idx) =>\n          <ProjectData\n            key={idx}\n            project={project}\n            users={users}\n            isAuthenticated={isAuthenticated}\n            login={login}\n            deleteProject={deleteProject}\n            admin={admin}\n            editProject={editProject}\n            projects={projects}\n          />\n        )}\n\n        <div id=\"todo\">\n          <br/>\n          <br/>\n        </div>\n\n        {isAuthenticated() && user.username === login &&\n        <div>\n          <h3>Создать заметку</h3>\n          <TodoForm\n          users={users}\n          projects={projects}\n          login={login}\n          createTodo={createTodo}\n          todos={todos}\n        />\n        </div>\n        }\n\n        <h3 className=\"user-title\">Заметки пользователя: </h3>\n        <br/>\n\n        <TodosData\n          todos={userTodos}\n          users={users}\n          projects={projects}\n          login={login}\n          isAuthenticated={isAuthenticated}\n          deleteTodo={deleteTodo}\n          editTodo={editTodo}\n          admin={admin}\n        />\n\n      </div>\n      }\n    </div>\n  )\n}\n","import \"./Projects.css\"\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {TodoForm} from \"../Todos/TodoForm\";\r\nimport {TodosData} from \"../Todos/TodosData\";\r\nimport {ProjectData} from \"./ProjectData\";\r\n\r\n\r\n/**\r\n * Страница проекта. Формирование данных проекта и заполнение\r\n * У авторизованных пользователей есть возможность создавать заметки к\r\n * проектам, редактировать, удалить проект со всеми заметками, если он автор\r\n * @param props {object} Данные, переданные родителем\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport const ProjectPage = (props) => {\r\n\r\n  let {id} = useParams();\r\n  id = +id;\r\n  const {\r\n    users, projects, todos, isAuthenticated, login, createTodo, deleteTodo,\r\n    deleteProject, editTodo, admin, editProject\r\n  } = props;\r\n\r\n  const project = projects.find(project => project.id === id);\r\n\r\n  const projectTodos = todos.filter(todo => todo.project === id)\r\n\r\n  return (\r\n    <div className=\"project-page\">\r\n      {project &&\r\n      <div>\r\n\r\n        <ProjectData\r\n          project={project}\r\n          users={users}\r\n          isAuthenticated={isAuthenticated}\r\n          login={login}\r\n          deleteProject={deleteProject}\r\n          editProject={editProject}\r\n          admin={admin}\r\n          projects={projects}\r\n        />\r\n\r\n        {isAuthenticated() &&\r\n          <div>\r\n            <h3>Создать заметку</h3>\r\n            <TodoForm\r\n              projectId={id}\r\n              users={users}\r\n              login={login}\r\n              createTodo={createTodo}\r\n              todos={todos}\r\n            />\r\n          </div>\r\n\r\n        }\r\n\r\n        <h3>Заметки к проекту: </h3><br/>\r\n        <TodosData\r\n          todos={projectTodos}\r\n          users={users}\r\n          projects={projects}\r\n          login={login}\r\n          isAuthenticated={isAuthenticated}\r\n          deleteTodo={deleteTodo}\r\n          editTodo={editTodo}\r\n          admin={admin}\r\n        />\r\n\r\n      </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import \"./Authorization.css\"\n\nimport React from \"react\";\n\n\n/**\n * Создание и обработка формы авторизации\n */\nexport class LoginForm extends React.Component {\n  /**\n   * Прокидывание свойств (props) от родителя, начальные состояния логина/пароля\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"login\": \"\",\n      \"password\": \"\"\n    };\n  }\n\n  /**\n   * Присваивание состояний на основе события изменения поля ввода формы\n   * @param event - Событие, оттуда извлекаются имена и значения login и password\n   */\n  handleChange(event) {\n    const {name, value} = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /**\n   * Присваивание состояний на основе события обработки отправки данных в форме\n   * login, password получен из состояния - куда они попали из this.handleChange\n   * auth получается из свойств, которые передал родитель\n   * @param event используется только для остановки события\n   */\n  handleSubmit(event) {\n    const {login, password} = this.state;\n    const {auth} = this.props;\n    auth(login, password);\n    this.setState({\n      \"login\": \"\",\n      \"password\": \"\"\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Отображение формы. Получение login, password из состояния\n   * Вызов методов this.handleChange и this.handleSubmit при событиях изменения\n   * поля ввода и отправки данных соответственно\n   * @returns {JSX.Element}\n   */\n  render() {\n\n    const {login, password} = this.state;\n\n    return (\n      <form onSubmit={(event => this.handleSubmit(event))} className=\"row g-2\">\n        <div className=\"col-auto\">\n          <input\n            required\n            type=\"text\"\n            name=\"login\"\n            placeholder=\"Логин\"\n            aria-describedby=\"loginHelpInline\"\n            value={login}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"loginHelpInline\" className=\"form-text\">\n            Введите Ваш уникальный логин, указанный при регистрации\n          </span>\n        </div>\n        <div className=\"col-auto\">\n          <input\n            required\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Пароль\"\n            aria-describedby=\"passwordHelpInline\"\n            value={password}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"passwordHelpInline\" className=\"form-text\">\n            Должно быть 8-20 символов.\n          </span>\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Отправить\"\n          className=\"auth-btn btn btn-primary col-auto\"\n        />\n      </form>\n    )\n  }\n}\n","/**\n * Меняю форматирование даты на свой кастомный язык\n * @param dateFormat {Object}\n * @param i18n {Object}\n */\nexport function getMyDateFormat(dateFormat, i18n) {\n  i18n.dayNames = [\n    \"Вс\",\n    \"Пн\",\n    \"Вт\",\n    \"Ср\",\n    \"Чт\",\n    \"Пт\",\n    \"Сб\",\n    \"Воскресенье\",\n    \"Понедельник\",\n    \"Вторник\",\n    \"Среда\",\n    \"Четверг\",\n    \"Пятница\",\n    \"Суббота\",\n  ];\n\n  i18n.monthNames = [\n    \"Янв\",\n    \"Фев\",\n    \"Мар\",\n    \"Апр\",\n    \"Май\",\n    \"Июн\",\n    \"Июл\",\n    \"Авг\",\n    \"Сен\",\n    \"Окт\",\n    \"Ноя\",\n    \"Дек\",\n    \"Января\",\n    \"Февраля\",\n    \"Марта\",\n    \"Апреля\",\n    \"Мая\",\n    \"Июня\",\n    \"Июля\",\n    \"Августа\",\n    \"Сентября\",\n    \"Октября\",\n    \"Ноября\",\n    \"Декабря\",\n  ];\n\n  i18n.timeNames = [\"a\", \"p\", \"до полудня\", \"после полудня\", \"A\", \"P\", \"AM\", \"PM\"];\n}\n","import \"./AsyncioAiohttp.css\"\n\nimport React, {PureComponent} from \"react\";\nimport axios from \"axios\";\n\n\n/**\n * Работа с Рыба-текстами, асинхронно сформированными на сервере\n */\nexport class AsyncioAiohttp extends PureComponent {\n  /**\n   * Конструктор компонента. Назначение начальных состояний\n   * @param props свойства унаследованные от вышестоящего компонента\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"asyncFishTodos\": [],\n    }\n  }\n\n  componentDidMount() {\n    const {\n      domain, asyncioAiohttpEndpoint, limit, offset\n    } = this.props;\n\n    this.getAsyncFishTodos(domain, asyncioAiohttpEndpoint, limit, offset)\n  }\n\n  /**\n   * Асинхронный запрос данных из Django REST, извлечение и обработка\n   * @param domain {string} Домен\n   * @param endpoint {string} Конечная точка\n   * @const headers {object} Заголовки\n   * @param limit {number} Лимит на количество полученных данных\n   * @param offset {number} Смещение относительно первого объекта\n   * @returns {Promise<void>}\n   */\n  async getAsyncFishTodos(\n    domain = \"http://localhost:3333\",\n    endpoint,\n    limit = 100,\n    offset = 0\n  ) {\n\n    const {getHeaders, handleErrors} = this.props\n\n    const headers = getHeaders();\n    await axios.get(\n      `${domain}${endpoint}?limit=${limit}&offset=${offset}/`,\n      {headers}).then(response => {\n      const data = response.data;\n      this.setState({\"asyncFishTodos\": data})\n    })\n      .catch((error) => {\n        handleErrors(error, \"getAsyncFishTodos\");\n      })\n  }\n\n\n  render() {\n\n    const {asyncFishTodos} = this.state\n\n    return (\n      <div>\n        <h3 className=\"asyncio-title\">Асинхронное получение сгенерированных\n          Рыба-текстов. Используются библиотеки AsyncIO и Aiohttp.\n          На сервере выполняется множество асинхронных запросов\n          (отдельно за каждым абзацем),\n          сюда приходит готовый массив данных. Данные всегда разные.\n        </h3>\n        {asyncFishTodos && asyncFishTodos.map((asyncFish, idx) =>\n          <p key={idx}>\n            <span className=\"asyncio-id\">ID {asyncFish.id}</span><br/>\n            <span className=\"asyncio-text\">{asyncFish.text}</span>\n          </p>\n        )}\n      </div>\n    )\n  }\n}\n","import \"./UploadImages.css\"\n\nimport {PureComponent} from \"react\";\n\n\n/**\n * Универсальная(ые) форма(ы) загрузки и изменения изображения\n */\nexport class UploadImageForm extends PureComponent {\n  /**\n   * Прокидывание свойств (props) от родителя, начальные состояния\n   * @param props {object} Данные, переданные родителем\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Для загрузки изображения и изменения данных\n      \"file\": \"\",\n      \"url\": this.props.uploadImage ? this.props.uploadImage.url : \"\",\n      \"name\": this.props.uploadImage ? this.props.uploadImage.name : \"\",\n      // Для конвертера - создания изображения с изменённым разрешением\n      \"height\": this.props.uploadImage ? this.props.uploadImage.height : \"\",\n      \"width\": this.props.uploadImage ? this.props.uploadImage.width : \"\"\n    }\n  }\n\n  /**\n   * Присваивание состояний на основе события изменения поля ввода формы\n   *\n   * @param event {object} Событие, оттуда извлекаются данные проекта\n   */\n  handleChange(event) {\n    const {name, value} = event.target;\n\n    // Изображение\n    if (event.target.files) {\n      this.setState({\n        \"file\": event.target.files[0]\n      });\n      return\n    }\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  /**\n   * Обработка и отправка данных формы на сервер\n   * @param event {object} Используется только для остановки события\n   */\n  handleSubmit(event) {\n    const {file, url, name, height, width} = this.state;\n    const {\n      toggleDetails, editImage, uploadImage, createImage, resizeImage,\n      toggleDetailsResize\n    } = this.props;\n\n    if (resizeImage) {\n      if (!height && !width) {\n        alert(\"Необходимо указать ширину или высоту\")\n      }\n      let data = new FormData();\n      data.append(\"height\", height)\n      data.append(\"width\", width)\n      resizeImage(data, uploadImage.id);\n      toggleDetailsResize();\n      event.preventDefault();\n      return\n    }\n\n    if (editImage) {\n      const data = {\"name\": name}\n      editImage(data, uploadImage.id);\n      toggleDetails();\n      event.preventDefault();\n      return\n    }\n\n    if (file && url) {\n      alert(\"Загружать можно только из 1 источника - из устройства или извне\");\n      this.setState({\n        \"file\": \"\",\n        \"url\": \"\",\n      });\n      event.preventDefault();\n      return\n    }\n\n    if (!file && !url) {\n      alert(\"Необходимо выбрать загружаемый файл или указать url-адрес\");\n      event.preventDefault();\n      return\n    }\n\n    // FormData - использую для отправки формы с файлом\n    let data = new FormData();\n    if (file) {\n      data.append(\"file\", file, file.name)\n    }\n    data.append(\"url\", url)\n    data.append(\"name\", name)\n\n    createImage(data);\n    this.setState({\n      \"file\": \"\",\n      \"url\": \"\",\n      \"name\": \"\",\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Отображение формы. В качестве соавторов можно выбрать всех, кроме себя\n   * @returns {JSX.Element}\n   */\n  render() {\n    const {name, url, height, width} = this.state;\n    const {editImage, createImage, resizeImage} = this.props;\n\n    return (\n      <form\n        onSubmit={(event => this.handleSubmit(event))}\n        className=\"row todo-form\"\n      >\n        {createImage && <div className=\"col-4\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            placeholder=\"выбрать изображение\"\n            aria-describedby=\"textHelpFileInline\"\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpFileInline\" className=\"form-text\">\n            Выберите изображение из Вашего устройства\n          </span>\n        </div>}\n\n        {createImage && <div className=\"col-3\">\n          <input\n            type=\"url\"\n            name=\"url\"\n            maxLength=\"99\"\n            placeholder=\"url-адрес изображения\"\n            aria-describedby=\"textHelpUrlInline\"\n            value={url}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpUrlInline\" className=\"form-text\">\n            Введите url-адрес изображения из внешнего источника\n          </span>\n        </div>}\n\n        {resizeImage && <div className=\"col-3\">\n          <input\n            type=\"number\"\n            name=\"width\"\n            max=\"10240\"\n            min=\"12\"\n            placeholder=\"ширина изображения\"\n            aria-describedby=\"textHelpWidthInline\"\n            value={width}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpWidthInline\" className=\"form-text\">\n            Укажите новую ширину изображения\n          </span>\n        </div>}\n\n        {resizeImage && <div className=\"col-3\">\n          <input\n            type=\"number\"\n            name=\"height\"\n            max=\"10240\"\n            min=\"12\"\n            placeholder=\"высота изображения\"\n            aria-describedby=\"textHelpHeightInline\"\n            value={height}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpHeightInline\" className=\"form-text\">\n            Укажите новую высоту изображения\n          </span>\n        </div>}\n\n        {(editImage || createImage) && <div className=\"col-3\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            maxLength=\"33\"\n            placeholder=\"Имя изображения\"\n            aria-describedby=\"textHelpNameInline\"\n            value={name}\n            className=\"form-control\"\n            onChange={(event => this.handleChange(event))}\n          />\n          <span id=\"textHelpNameInline\" className=\"form-text\">\n            Можно не указывать\n          </span>\n        </div>}\n\n        <input\n          type=\"submit\"\n          value=\"Сохранить\"\n          className=\"auth-btn btn btn-primary col-2\"\n        />\n      </form>\n    )\n  }\n}\n","import \"./UploadImages.css\"\n\nimport {PureComponent} from \"react\";\nimport {UploadImageForm} from \"./UploadImageForm\";\n\n\n/**\n * Обработка и рендеринг данных изображения, форм\n */\nexport class UploadImageData extends PureComponent {\n  /**\n   * Изначально состояние видимости выключено\n   * @param props.visible {Boolean}\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: false,\n      visibleResize: false\n    }\n  }\n\n  /**\n   * Переключатель видимого и невидимого состояния элементов\n   */\n  toggleDetails = () => {\n    const newToggleState = !this.state.visible;\n    this.setState({visible: newToggleState});\n  }\n\n  /**\n   * Переключатель видимого и невидимого состояния конвертера изображения\n   */\n  toggleDetailsResize = () => {\n    const newToggleState = !this.state.visibleResize;\n    this.setState({visibleResize: newToggleState});\n  }\n\n  render() {\n\n    const {\n      uploadImages, uploadImage, isAuthenticated, deleteUploadImage, editImage,\n      resizeImage\n    } = this.props;\n    const parentPictureObj = uploadImages\n      .find(image => image.id === uploadImage.parentPicture);\n    const parentPictureUrl = parentPictureObj && parentPictureObj.picture;\n    const {visible, visibleResize} = this.state;\n\n    return (\n      <div>\n        <div className=\"images-name\">Имя: {uploadImage.name}</div>\n        <div className=\"images-el\">\n          Загружена из {(uploadImage.url &&\n          <a href={uploadImage.url} target=\"_blank\" rel=\"noreferrer\">\n            {uploadImage.url}\n          </a>) || \"устройства\"}\n        </div>\n        {uploadImage.parentPicture && <div className=\"images-parrent\">\n          Разрешение картинки изменено! Родительское изображение:\n          <span> </span>\n          {<a\n            href={parentPictureUrl}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {parentPictureUrl}\n          </a>}\n        </div>}\n\n        {isAuthenticated() && <div>\n            <span\n              onClick={this.toggleDetailsResize}\n              className=\"btn btn-outline-secondary\"\n            >\n          {visibleResize ? \"Отменить\" : \"Конвертер - изменить разрешение\"}\n            </span>\n          {visibleResize &&\n          <div>\n            Создать изображение с новым разрешением:\n            <UploadImageForm\n              uploadImage={uploadImage}\n              toggleDetailsResize={() => this.toggleDetailsResize()}\n              uploadImages={uploadImages}\n              resizeImage={resizeImage}\n            />\n          </div>\n          }\n        </div>\n        }\n\n        {isAuthenticated() && <div>\n            <span\n              onClick={this.toggleDetails}\n              className=\"btn btn-outline-secondary\"\n            >\n          {visible ? \"Отменить\" : \"Изменить данные\"}\n            </span>\n          {visible &&\n          <div>\n            Отредактировать поля:\n            <UploadImageForm\n              uploadImage={uploadImage}\n              toggleDetails={() => this.toggleDetails()}\n              uploadImages={uploadImages}\n              editImage={editImage}\n            />\n          </div>\n          }\n        </div>\n        }\n\n        {isAuthenticated() && <div\n          className=\"btn btn-outline-danger\"\n          onClick={() => deleteUploadImage(uploadImage.id)}\n        >\n          Удалить!\n        </div>}\n        <div className=\"images-el\">\n          Ширина: {uploadImage.width} | Высота: {uploadImage.height}\n        </div>\n        <div className=\"images-el\">\n          <a href={uploadImage.picture} target=\"_blank\" rel=\"noreferrer\">\n            <img className=\"images-img\"\n                 src={uploadImage.picture}\n                 alt={uploadImage.name}\n            />\n          </a>\n        </div>\n        <br/>\n      </div>\n    )\n  }\n}\n","import \"./UploadImages.css\"\n\nimport {PureComponent} from \"react\";\nimport axios from \"axios\";\nimport {UploadImageData} from \"./UploadImageData\";\nimport {UploadImageForm} from \"./UploadImageForm\";\n\n\n/**\n * Работа с изображениями, загрузка на сервер, получение из сервера, удаление,\n * изменение имени, создание с новым разрешением - доступно авторизованным!\n */\nexport class UploadImages extends PureComponent {\n  /**\n   * Конструктор компонента. Назначение начальных состояний\n   * @param props свойства унаследованные от вышестоящего компонента\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"uploadImages\": [],\n    }\n  }\n\n  componentDidMount() {\n    this.getUploadImages();\n  }\n\n  /**\n   * Асинхронный запрос данных из Django REST, извлечение и обработка\n   * @const domain {string} Домен\n   * @const uploadImagesEndpoint {string} Конечная точка\n   * @const headers {object} Заголовки\n   * @const limit {number} Лимит на количество полученных данных\n   * @const offset {number} Смещение относительно первого объекта\n   * @returns {Promise<void>}\n   */\n  async getUploadImages() {\n\n    const {\n      getHeaders, handleErrors, domain, uploadImagesEndpoint, limit, offset\n    } = this.props;\n\n    const headers = getHeaders();\n    await axios.get(\n      `${domain}${uploadImagesEndpoint}?limit=${limit}&offset=${offset}/`,\n      {headers}).then(response => {\n      const data = response.data.results;\n      this.setState({\"uploadImages\": data});\n    })\n      .catch((error) => {\n        handleErrors(error, \"getUploadImages\");\n      })\n  }\n\n  /**\n   * Загрузка нового изображения\n   * @param data {Object} Объект данных изображения\n   * @returns {Promise<void>}\n   */\n  async createImage(data) {\n    await this.createImageDataREST(data);\n  }\n\n  /**\n   * POST запрос в Django REST на создание данных\n   * В случае удачной операции перезагружаю данные с\n   * сервера для избежания артефактов, рассинхрона с актуальными данными...\n   * В других методах (удаления, изменения) происходит перерисовка данных,\n   * без повторной загрузки из БД\n   * @param data {object} Отправляемые данные\n   * @const domain {string} Домен\n   * @const endpoint {string} Конечная точка\n   * @const headers {object} Заголовки\n   */\n  createImageDataREST(data) {\n    const {\n      domain, uploadImagesEndpoint, handleErrors, getHeaders\n    } = this.props;\n    let headers = getHeaders();\n    // multipart/form-data - использую для отправки формы с файлом\n    headers[\"Content-Type\"] = \"multipart/form-data\";\n    axios.post(`${domain}${uploadImagesEndpoint}`, data, {headers})\n      .then(response => {\n        this.getUploadImages();\n      })\n      .catch(error => {\n          handleErrors(error, \"createImageDataREST\");\n        }\n      )\n  }\n\n  /**\n   * Конвертер изображения - изменение разрешения и сохранение в новый файл\n   * @param data {Object} Объект данных изображения\n   * @param id {number} Идентификатор\n   * @returns {Promise<void>}\n   */\n  async resizeImage(data, id) {\n    await this.resizeImageDataREST(data, id);\n  }\n\n  /**\n   * POST запрос в Django REST на создание данных\n   * В случае удачной операции перезагружаю данные с\n   * сервера для избежания артефактов, рассинхрона с актуальными данными...\n   * В других методах (удаления, изменения) происходит перерисовка данных,\n   * без повторной загрузки из БД\n   * @param data {object} Отправляемые данные\n   * @param id {number} Идентификатор\n   * @const domain {string} Домен\n   * @const endpoint {string} Конечная точка\n   * @const headers {object} Заголовки\n   */\n  resizeImageDataREST(data, id) {\n    const {\n      domain, uploadImagesEndpoint, handleErrors, getHeaders,\n      imageResizeEndpoint\n    } = this.props;\n    let headers = getHeaders();\n    headers[\"Content-Type\"] = \"multipart/form-data\";\n    axios.post(\n      `${domain}${uploadImagesEndpoint}${id}${imageResizeEndpoint}`,\n      data,\n      {headers})\n      .then(response => {\n        this.getUploadImages();\n      })\n      .catch(error => {\n          handleErrors(error, \"resizeImageDataREST\");\n        }\n      )\n  }\n\n  /**\n   * Удаление изображения из состояния. Отфильтрованная перерисовка данных.\n   * Вызов удаления из сервера.\n   * @param id {number} Идентификатор изображения\n   * @returns {Promise<void>}\n   */\n  async deleteUploadImage(id) {\n    const {uploadImages} = this.state;\n    this.setState({\n        \"uploadImages\": uploadImages.filter(image => image.id !== id),\n      },\n      () => this.deleteUploadImageDataREST(id)\n    )\n  }\n\n  /**\n   * Удаление загруженного изображения с помощью Django REST.\n   * Данные перезагружаются только в случае ошибки.\n   * @param id {number} Идентификатор удаляемых данных\n   * @const headers {object} Заголовки\n   */\n  deleteUploadImageDataREST(id) {\n    const {\n      getHeaders, handleErrors, domain, uploadImagesEndpoint\n    } = this.props;\n\n    const headers = getHeaders();\n    axios.delete(`${domain}${uploadImagesEndpoint}${id}`, {headers})\n      .then(response => {\n      })\n      .catch(error => {\n          handleErrors(error, \"deleteUploadImage\");\n          this.getUploadImages();\n        }\n      )\n  }\n\n  /**\n   * Редактирование изображения. Обновление состояния актуальными данными без\n   * перезагрузки данных из БД.\n   * @param data {Object} Объект с данными изображения\n   * @param id {number} Идентификатор изображения\n   * @returns {Promise<void>}\n   */\n  async editImage(data, id) {\n    const {uploadImages} = this.state;\n    const newImage = uploadImages.find(uploadImage => uploadImage.id === id);\n    // Обновляю изображение новыми данными, если есть\n    Object.keys(data).map((objectKey, index) =>\n      newImage[objectKey] = data[objectKey]\n    );\n    await this.setState(\n      {\n        \"uploadImages\": uploadImages.map(uploadImage =>\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\n          uploadImage.id === id\n            ? {...uploadImage, ...newImage}\n            : uploadImage\n        )\n      },\n      // Отправляю в БД только те данные, которые нужно изменить\n      () => this.editImageDataREST(data, id)\n    )\n  }\n\n  /**\n   * Редактирование данных с помощью Django REST. Patch запрос.\n   * Данные перезагружаются только в случае ошибки.\n   * Перерисовка происходит через метод, вызвавший этот метод.\n   * @param data {Object} Объект данных\n   * @param id {number} Идентификатор изменяемых данных\n   */\n  editImageDataREST(data, id) {\n    const {\n      getHeaders, handleErrors, domain, uploadImagesEndpoint\n    } = this.props;\n\n    const headers = getHeaders();\n    axios.patch(`${domain}${uploadImagesEndpoint}${id}/`, data, {headers})\n      .then(response => {\n      })\n      .catch(error => {\n          handleErrors(error, \"editImageDataREST\");\n          this.getUploadImages();\n        }\n      )\n  }\n\n\n  render() {\n\n    const {uploadImages} = this.state;\n    const {isAuthenticated} = this.props;\n\n    return (\n      <div>\n        <h3 className=\"images-title\">\n          Работа с изображениями, загрузка на сервер, получение из сервера,\n          удаление, изменение имени, создание с новым разрешением - доступно\n          авторизованным!\n        </h3>\n\n        {isAuthenticated() &&\n        <div>\n          <h3>Загрузить изображение (из устройства или внешнего источника)</h3>\n          <UploadImageForm createImage={(data) => this.createImage(data)}/>\n        </div>\n        }\n\n        {uploadImages && uploadImages.map((uploadImage, idx) =>\n          <UploadImageData\n            key={idx}\n            uploadImages={uploadImages}\n            uploadImage={uploadImage}\n            isAuthenticated={isAuthenticated}\n            deleteUploadImage={(id) => this.deleteUploadImage(id)}\n            editImage={(data, id) => this.editImage(data, id)}\n            resizeImage={(data, id) => this.resizeImage(data, id)}\n          />\n        )}\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n} from \"react-router-dom\";\n\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie/es6\";\n\nimport {Header} from \"./components/Header\";\nimport {Users} from \"./components/Users\";\nimport {Projects} from \"./components/Projects\";\nimport {Todos} from \"./components/Todos\";\nimport {Footer} from \"./components/Footer\";\nimport {NotFound404} from \"./components/NotFound404\";\nimport {UserPage} from \"./components/Users/UserPage\";\nimport {ProjectPage} from \"./components/Projects/ProjectPage\";\nimport {LoginForm} from \"./components/Authorization\";\nimport {UserForm} from \"./components/Users/UserForm\";\nimport dateFormat from \"dateformat\";\nimport {i18n} from \"dateformat\";\nimport {getMyDateFormat} from \"./scripts/getMyDateFormat\";\nimport {AsyncioAiohttp} from \"./components/AsyncioAiohttp\";\nimport {UploadImages} from \"./components/UploadImages\";\n\n// Меняю форматирование даты на свой кастомный язык\ngetMyDateFormat(dateFormat, i18n)\n\n\n/**\n * На клиенте используется принцип One-Way Data Flow\n * Главный родитель компонентов\n */\nexport class GeneralApp extends React.Component {\n  /**\n   * Конструктор главного родителя компонентов. Назначение начальных состояний\n   * @param props свойства унаследованные от вышестоящего компонента\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"domain\": \"https://backend.radif.ru\",\n      \"swaggerEndpoint\": \"/swagger/\",\n      \"swaggerJsonEndpoint\": \"/swagger.json\",\n      \"swaggerYamlEndpoint\": \"/swagger.yaml\",\n      \"reDocEndpoint\": \"/redoc/\",\n      \"RESTAPIEndpoint\": \"/api/\",\n      \"adminEndpoint\": \"/administration/\",\n\n      // Включены вложенные объекты данных, для получения данных без\n      // вложенности есть много других endpoint-ов, подробнее в OpenAPI проекта\n      \"rolesEndpoint\": \"/api/roles/\",\n      \"usersEndpoint\": \"/api/users/\",\n      \"projectsEndpoint\": \"/api/projects/\",\n      \"todosEndpoint\": \"/api/todos/\",\n\n      \"asyncioAiohttpEndpoint\": \"/api/todos/async_fish_todos/\",\n      \"uploadImagesEndpoint\": \"/api/images/\",\n      \"imageResizeEndpoint\": \"/resize/\",\n\n      \"graphQLEndpoint\": \"/graphql/\",\n\n      \"tokenEndpoint\": \"/api/token/\",\n      \"tokenRefreshEndpoint\": \"/api/token/refresh/\",\n\n      \"limit\": 999,\n      \"offset\": 0,\n\n      \"roles\": [],\n      \"users\": [],\n      \"projects\": [],\n      \"todos\": [],\n\n      \"token\": \"\",\n      \"refreshToken\": \"\",\n      \"login\": \"\",\n      \"admin\": false,\n\n      \"notification\": \"\"\n    }\n  }\n\n  /**\n   * Вызывается сразу после монтирования (то есть, вставки компонента в DOM).\n   * В этом методе должны происходить действия, которые требуют наличия\n   * DOM-узлов. Это хорошее место для создания сетевых запросов.\n   */\n  componentDidMount() {\n    this.getToken()\n  }\n\n  /**\n   * Получение токена и логина из хранилища - Cookies и присвоение состояниям\n   */\n  getToken() {\n    const cookies = new Cookies();\n    const token = cookies.get(\"token\");\n    const login = cookies.get(\"login\");\n    this.setState(\n      {\"token\": token, \"login\": login}, () => this.getAllData());\n  }\n\n  /**\n   * Создание и возврат заголовков для запросов\n   * @returns {{\"Content-Type\": string}}\n   */\n  getHeaders() {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    }\n    if (this.isAuthenticated()) {\n      // Для JWT к токену в заголовке нужно добавить префикс Bearer\n      // headers[\"Authorization\"] = `Bearer ${this.state.token}`;\n      // Для безопасности изменил проверку на сервере значения заголовка на\n      // кастомное\n      headers[\"Authorization\"] = `Bear_R@d1f ${this.state.token}`;\n    }\n    return headers\n  }\n\n  /**\n   * Проверка - авторизован ли пользователь\n   * @returns {boolean} Возвращает true или false\n   */\n  isAuthenticated() {\n    return !!(this.state.token)\n  }\n\n  /**\n   * Проверка - является ли администратором пользователь\n   * @param login {string} Логин пользователя\n   * @param users {Array} Массив объектов пользователей\n   * @param roles {Array} Массив объектов ролей\n   * @returns {boolean} Возвращает true или false\n   */\n  isAdmin(login, users, roles) {\n    const user = users.find(user => user.username === login);\n    const adminRole = roles.find(role => role.role === \"администратор\");\n    return !!user.roles.find(roleId => roleId === adminRole.id)\n  }\n\n  /**\n   * Авторизация пользователя. Получение токена на основе логина и пароля\n   * @param login {string} - Логин\n   * @param password {string}  - Пароль\n   */\n  auth(login, password) {\n    const {domain, tokenEndpoint} = this.state\n    axios.post(`${domain}${tokenEndpoint}`, {\n      \"username\": login,\n      \"password\": password\n    }).then(response => {\n      this.setToken(response.data[\"access\"], login);\n    }).catch(error => {\n        console.log(`getToken err: ${error}`);\n        alert(\"Неверный логин или пароль\");\n      }\n    )\n  }\n\n  /**\n   * Присвоение токена и логина в Cookies для всех путей и состояния приложения\n   * @param token {string} Токен\n   * @param login {string} Логин\n   */\n  setToken(token, login) {\n    const cookies = new Cookies();\n    cookies.set(\"token\", token, {path: \"/\"});\n    cookies.set(\"login\", login, {path: \"/\"});\n\n\n    this.setState({\"token\": token, \"login\": login},\n      () => {\n        this.getAllData();\n      }\n    );\n  }\n\n  /**\n   * Деавторизация\n   */\n  logout() {\n    this.setToken(\"\", \"\");\n  }\n\n  /**\n   * Получить все данные\n   */\n  getAllData() {\n    // Если пользователь не авторизован для получения данных использую GraphQL.\n    // Сделано просто для примера. Никакого преимущества это не даёт и даже\n    // наоборот размер данных в 2 раза выше из-за того, что id дополнительно\n    // вкладываются в объекты (словари) с 1 полем id. Ещё и клиент больше\n    // нагружается из-за затрат на извлечение id и преобразование их к числу...\n    if (!this.isAuthenticated()) {\n      this.getRolesDataSetGraphQL();\n    } else {\n      this.getRolesDataSetREST();\n    }\n  }\n\n  /**\n   * Получить данные ролей из Django REST и все связанные данные других таблиц\n   */\n  getRolesDataSetREST() {\n    const {\n      domain, rolesEndpoint, limit, offset\n    } = this.state;\n\n    this.getDataREST(domain, rolesEndpoint, limit, offset)\n  }\n\n  /**\n   * Получить данные ролей из GraphQL и все связанные данные других таблиц\n   */\n  getRolesDataSetGraphQL() {\n    const {domain, graphQLEndpoint} = this.state;\n    const queryGraphQL = `\n      {\n        allRoles {\n          id\n          role\n          roleUsers {\n            id\n            username\n            firstName\n            lastName\n            middleName\n            email\n            birthdate\n            lastLogin\n            isStaff\n            isActive\n            dateJoined\n            updated\n            roles {\n              id\n            }\n            userProjects {\n              id\n              name\n              repository\n              isActive\n              created\n              updated\n              users {\n                id\n              }\n            }\n            userTodos{\n              id\n              text\n              isActive\n              created\n              updated\n              project {\n                id\n              }\n              user {\n                id\n              }\n            }\n          }\n        }\n      }`;\n    this.getDataGraphQL(domain, graphQLEndpoint, queryGraphQL);\n  }\n\n  /**\n   * Получить данные пользователей из Django REST со связанными данными\n   */\n  getUsersDataSetREST() {\n    const {\n      domain, usersEndpoint, limit, offset\n    } = this.state;\n\n    this.getDataREST(domain, usersEndpoint, limit, offset)\n  }\n\n  /**\n   * Получить данные заметок из Django REST со связанными данными\n   */\n  getTodosDataSetREST() {\n    const {\n      domain, todosEndpoint, limit, offset\n    } = this.state;\n\n    this.getDataREST(domain, todosEndpoint, limit, offset);\n  }\n\n  /**\n   * Получить данные проектов из Django REST со связанными данными\n   */\n  getProjectsDataSetREST() {\n    const {\n      domain, projectsEndpoint, limit, offset\n    } = this.state;\n\n    this.getDataREST(domain, projectsEndpoint, limit, offset);\n  }\n\n  /**\n   * Регистрация пользователя\n   * @param data {Object} Объект данных пользователя\n   * @returns {Promise<void>}\n   */\n  async createUser(data) {\n    const {domain, usersEndpoint} = this.state;\n    await this.createDataREST(data, domain, usersEndpoint);\n  }\n\n  /**\n   * Создание проекта с помощью Django REST.\n   * При создании проекта создателю назначается дополнительная роль -\n   * владелец проекта. Но если он добавляет других пользователей к этому\n   * проекту им не назначается данная роль.\n   * @param data.name {string} Имя проекта\n   * @param data.repository {url, string} Ссылка на репозиторий проекта\n   * @param data.users {array} Массив id пользователей\n   * @returns {Promise<void>}\n   */\n  async createProject(data) {\n    const {domain, projectsEndpoint, roles, users, login} = this.state;\n    await this.createDataREST(data, domain, projectsEndpoint);\n\n    const projectOwnerRole = +roles.find(\n      role => role.role === \"владелец проекта\"\n    ).id\n    const authUser = users.find(user => user.username === login)\n    if (!authUser.roles.find(role => role === projectOwnerRole)) {\n      await this.editUser({\n        \"roles\": [...authUser.roles, projectOwnerRole]\n      }, +authUser.id)\n    }\n  }\n\n  /**\n   * Создание заметки с помощью Django REST\n   * @param data.project {number} Идентификатор проекта\n   * @param data.user {number} Идентификатор пользователя\n   * @param data.text {string} Текст заметки\n   * @returns {Promise<void>}\n   */\n  async createTodo(data) {\n    const {domain, todosEndpoint} = this.state;\n    await this.createDataREST(data, domain, todosEndpoint);\n  }\n\n  /**\n   * Редактирование пользователя. Обновление состояния актуальными данными без\n   * перезагрузки данных из БД.\n   * @param data {Object} Изменяемые данные пользователя\n   * @param id {number} Идентификатор пользователя\n   * @returns {Promise<void>}\n   */\n  async editUser(data, id) {\n    const {domain, usersEndpoint, users} = this.state;\n    const newUser = users.find(todo => todo.id === id);\n    // Обновляю проект новыми данными, если есть\n    Object.keys(data).map((objectKey, index) =>\n      newUser[objectKey] = data[objectKey]\n    );\n    await this.setState(\n      {\n        \"users\": users.map(user =>\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\n          user.id === id\n            ? {\n              ...user, ...newUser, updated: dateFormat(\n                new Date(), \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n              )\n            }\n            : user\n        )\n      },\n      // Отправляю в БД только те данные, которые нужно изменить\n      () => this.editDataREST(data, domain, usersEndpoint, id)\n    )\n  }\n\n  /**\n   * Редактирование проекта. Обновление состояния актуальными данными без\n   * перезагрузки данных из БД.\n   * @param data {Object} Объект со свойствами проекта\n   * @param id {number} Идентификатор проекта\n   * @returns {Promise<void>}\n   */\n  async editProject(data, id) {\n    const {domain, projectsEndpoint, projects} = this.state;\n    const newProject = projects.find(todo => todo.id === id);\n    // Обновляю проект новыми данными, если есть\n    Object.keys(data).map((objectKey, index) =>\n      newProject[objectKey] = data[objectKey]\n    );\n    await this.setState(\n      {\n        \"projects\": projects.map(project =>\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\n          project.id === id\n            ? {\n              ...project, ...newProject, updated: dateFormat(\n                new Date(), \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n              )\n            }\n            : project\n        )\n      },\n      // Отправляю в БД только те данные, которые нужно изменить\n      () => this.editDataREST(data, domain, projectsEndpoint, id)\n    )\n  }\n\n  /**\n   * Редактирование заметки. Обновление состояния актуальными данными без\n   * перезагрузки данных из БД.\n   * @param data {Object} Объект со свойствами заметки\n   * @param data.text {string} Текст заметки\n   * @param id {number} Идентификатор заметки\n   * @returns {Promise<void>}\n   */\n  async editTodo(data, id) {\n    const {domain, todosEndpoint, todos} = this.state;\n    const newTodo = todos.find(todo => todo.id === id);\n    // Обновляю заметку новыми данными, если есть\n    Object.keys(data).map((objectKey, index) =>\n      newTodo[objectKey] = data[objectKey]\n    );\n    await this.setState(\n      {\n        \"todos\": todos.map(todo =>\n          // Замена обновлённых данных и даты обновления с помощью фичи ES6\n          todo.id === id\n            ? {\n              ...todo, ...newTodo, updated: dateFormat(\n                new Date(), \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n              )\n            }\n            : todo\n        )\n      },\n      // Отправляю в БД только те данные, которые нужно изменить\n      () => this.editDataREST(data, domain, todosEndpoint, id)\n    )\n  }\n\n  /**\n   * Удаление проекта с помощью Django REST.\n   * Перерисовка без перезагрузки данных из БД.\n   * Вместе с проектом удаляются все связанные заметки.\n   * @param id {number} Идентификатор проекта\n   * @returns {Promise<void>}\n   */\n  async deleteProject(id) {\n    const {domain, projectsEndpoint, projects, todos} = this.state;\n    await this.setState(\n      {\n        \"projects\": projects.filter(projects => projects.id !== id),\n        \"todos\": todos.filter(todo => todo.project !== id)\n      },\n      () => this.deleteDataREST(domain, projectsEndpoint, id)\n    )\n  }\n\n  /**\n   * Удаление заметки с помощью Django REST.\n   * Перерисовка без перезагрузки данных из БД.\n   * @param id {number} Идентификатор заметки\n   * @returns {Promise<void>}\n   */\n  async deleteTodo(id) {\n    const {domain, todosEndpoint, todos} = this.state;\n    await this.setState(\n      {\"todos\": todos.filter(todo => todo.id !== id)},\n      () => this.deleteDataREST(domain, todosEndpoint, id)\n    )\n  }\n\n  /**\n   * Асинхронный запрос данных из Django REST, извлечение и обработка\n   * @param domain {string} Домен\n   * @param endpoint {string} Конечная точка\n   * @const headers {object} Заголовки\n   * @param limit {number} Лимит на количество полученных данных\n   * @param offset {number} Смещение относительно первого объекта\n   * @returns {Promise<void>}\n   */\n  async getDataREST(\n    domain = \"http://localhost:3333\",\n    endpoint,\n    limit = 100,\n    offset = 0\n  ) {\n\n    const headers = this.getHeaders();\n    await axios.get(\n      `${domain}${endpoint}?limit=${limit}&offset=${offset}/`,\n      {headers}).then(response => {\n      const data = response.data.results;\n      this.setAllData(data);\n    })\n      .catch((error) => {\n        this.handleErrors(error, \"getDataREST\");\n      })\n  }\n\n  /**\n   * Асинхронный запрос данных из GraphQL, извлечение и обработка\n   * Так же происходит пересборка данных, комментарии ниже\n   * @param domain {string} Домен\n   * @param graphQLEndpoint {string} Конечная точка\n   * @param queryGraphQL {string} Запрос на языке GraphQL\n   * @const headers {object} Заголовки\n   * @returns {Promise<void>}\n   */\n  async getDataGraphQL(\n    domain,\n    graphQLEndpoint,\n    queryGraphQL\n  ) {\n    const headers = this.getHeaders();\n    await axios.post(\n      `${domain}${graphQLEndpoint}`,\n      {\n        query: queryGraphQL,\n        headers: headers,\n      }).then(response => {\n\n      const rolesSet = response.data.data.allRoles;\n\n      const usersSet = rolesSet.map(role => {\n        // id ролей перевожу в числовой формат.\n        // Хотя и role.id не возвращается, но как мы знаем данные в JS хранятся\n        // по ссылке, так что они изменились глобально.\n        role.id = +role.id;\n        // Возвращаю пользователей для дальнейшей мутации данных\n        return role.roleUsers;\n      })\n        .reduce((arr1, arr2) => [...arr1, ...arr2])\n\n      // Во избежание конфликтов пересобираю данные так же, как если бы запрос\n      // делался на Django REST, а не на GraphQL. ID перевожу в цифровой формат\n\n      usersSet.map(user => {\n        user.id = +user.id;\n        // Преобразую объекты ролей в массив из id\n        const rolesArr = [];\n        user.roles.map(role => {\n          rolesArr.push(+role.id);\n          return role\n        });\n        user.roles = rolesArr;\n        user.userTodos.map(todo => {\n          // В поле user и project помещаю соответствующие id, вместо объектов\n          todo.id = +todo.id;\n          todo.user = +todo.user.id;\n          todo.project = +todo.project.id;\n          return todo\n        });\n        // Преобразую поля проектов\n        user.userProjects.map(project => {\n          project.id = +project.id;\n          // Вместо массива объектов, делаю массив из id\n          const usersArr = [];\n          project.users.map(user => {\n            usersArr.push(+user.id);\n            return user\n          })\n          project.users = usersArr;\n          return project\n        })\n        return user\n      })\n\n      this.setAllData(rolesSet);\n\n    })\n      .catch((error) => {\n        this.handleErrors(error, \"getDataGraphQL\");\n      })\n  }\n\n  /**\n   * Сохраняю полученные данные из Django REST и GraphQL в состояния.\n   * Мутирую данные, распределяю по категориям, сортирую...\n   * @param data {array} Полученные данные.\n   */\n  setAllData(data) {\n    let roles = [];\n    let projects = [];\n    let todos = [];\n\n    let usersSet = data.map(role => {\n      // Собираю роли\n      roles.push({id: role.id, role: role.role});\n      // Возвращаю набор пользователей со связанными данными\n      return role.roleUsers;\n    })\n      .reduce((arr1, arr2) => [...arr1, ...arr2], ...[])\n    // Уникальные id пользователей\n    const uniqueUsersIds = [...new Set(usersSet.map(project => project.id))];\n    // Уникальные пользователи\n    const users = uniqueUsersIds.map(userId => {\n      const {userProjects, userTodos, ...rest} = usersSet.find(\n        user => {\n          if (user.id === userId) {\n            // Сразу, при сборке данных привожу даты в нужный формат\n            user.updated = user.updated ? dateFormat(\n              user.updated, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n            ) : null;\n            user.dateJoined = user.dateJoined ? dateFormat(\n              user.dateJoined, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n            ) : null;\n            user.lastLogin = user.lastLogin ? dateFormat(\n              user.lastLogin, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n            ) : null;\n            return true\n          }\n          return false\n        }\n      );\n      // Собираю заметки\n      todos.push(...userTodos.map(todo => {\n        // Сразу, при сборке данных привожу даты в нужный формат\n        todo.created = todo.created ? dateFormat(\n          todo.created, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n        ) : null;\n        todo.updated = todo.updated ? dateFormat(\n          todo.updated, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n        ) : null;\n        return todo\n      }));\n      // Собираю проекты\n      projects.push(...userProjects);\n      // Возвращаю чистых пользователей\n      return rest;\n    });\n    // Сортирую пользователей по дате регистрации\n    users.sort((a, b) =>\n      new Date(b.dateJoined) - new Date(a.dateJoined)\n    )\n\n    // Уникальные id проектов\n    const uniqueProjectsIds = [...new Set(projects.map(project => project.id))];\n    // Уникальные проекты\n    projects = uniqueProjectsIds\n      .map(id => projects.find(project => {\n        if (project.id === id) {\n          // Сразу, при сборке данных привожу дату в нужный формат\n          project.created = project.created ? dateFormat(\n            project.created, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n          ) : null;\n          // Сразу, при сборке данных привожу дату в нужный формат\n          project.updated = project.updated ? dateFormat(\n            project.updated, \"dddd, d mmmm, yyyy года, h:MM:ss tt\"\n          ) : null;\n          return true\n        }\n        return false\n      }));\n    // Сортировка проектов по дате обновления\n    projects.sort((a, b) =>\n      new Date(b.created) - new Date(a.created)\n    )\n\n    // Сортировка заметок по дате обновления\n    todos.sort((a, b) =>\n      new Date(b.created) - new Date(a.created)\n    )\n\n    let admin = false;\n    if (this.isAuthenticated()) {\n      admin = this.isAdmin(this.state.login, users, roles);\n    }\n\n    this.setState({\n      \"roles\": roles,\n      \"users\": users,\n      \"projects\": projects,\n      \"todos\": todos,\n      \"admin\": admin\n    })\n  }\n\n  /**\n   * POST запрос в Django REST на создание данных\n   * В случае удачной операции создаю уведомление. Перезагружаю данные с\n   * сервера для избежания артефактов, рассинхрона с актуальными данными...\n   * В других методах (удаления, изменения) происходит перерисовка данных,\n   * без повторной загрузки из БД\n   * @param data {object} Отправляемые данные\n   * @param domain {string} Домен\n   * @param endpoint {string} Конечная точка\n   * @const headers {object} Заголовки\n   */\n  createDataREST(data, domain, endpoint) {\n    const headers = this.getHeaders();\n    axios.post(`${domain}${endpoint}`, data, {headers})\n      .then(response => {\n        this.setNotification(\"Успешная операция!\");\n        this.getAllData();\n      })\n      .catch(error => {\n          this.handleErrors(error, \"createDataREST\");\n        }\n      )\n  }\n\n  /**\n   * Редактирование данных с помощью Django REST. Patch запрос.\n   * Данные перезагружаются только в случае ошибки.\n   * Перерисовка происходит через метод, вызвавший этот метод.\n   * @param data {Object} Объект данных\n   * @param domain {string} Домен\n   * @param endpoint {string} Конечная точка\n   * @param id {number} Идентификатор изменяемых данных\n   */\n  editDataREST(data, domain, endpoint, id) {\n    const headers = this.getHeaders();\n    axios.patch(`${domain}${endpoint}${id}/`, data, {headers})\n      .then(response => {\n      })\n      .catch(error => {\n          this.handleErrors(error, \"createDataREST\");\n          this.getAllData();\n        }\n      )\n  }\n\n  /**\n   * Удаление данных с помощью Django REST.\n   * Данные перезагружаются только в случае ошибки.\n   * Перерисовка происходит через метод, вызвавший этот метод.\n   * @param domain {string} Домен\n   * @param endpoint {string} Конечная точка\n   * @param id {number} Идентификатор удаляемых данных\n   * @const headers {object} Заголовки\n   */\n  deleteDataREST(domain, endpoint, id) {\n    const headers = this.getHeaders()\n    axios.delete(`${domain}${endpoint}${id}`, {headers})\n      .then(response => {\n      })\n      .catch(error => {\n          this.handleErrors(error, \"deleteDataREST\");\n          this.getAllData();\n        }\n      )\n  }\n\n  /**\n   * Обработка ошибок связанных с токеном, извлечённом из\n   * Cookies браузера, недоступностью сервера и т.д.\n   * @param error {object} Объект ошибки\n   * @param text {string} Пояснение к ошибке, или откуда вызвана\n   */\n  handleErrors(error, text = \"\") {\n    console.log(`${text} err: ${error}`);\n    if (error.message.indexOf(\"ISO-8859-1\") !== -1) {\n      alert(`Токен испорчен - неправильный формат! Кто-то изменил Cookies!\n          \\nПовторите вход в свой личный кабинет! И проверьтесь на вирусы!`);\n      this.setToken(\"\", \"\");\n    }\n    if (!!error.request) {\n      if (error.request.status === 401) {\n        alert(`Токен просрочен. \\nПовторите вход в свой личный кабинет!`);\n        this.setToken(\"\", \"\");\n      } else if (error.request.status === 0) {\n        alert(`Сервер недоступен! \\nПопробуйте зайти позже`);\n      } else if (error.request.status === 500) {\n        alert(`Сервер не может обработать Ваш запрос.\n        \\nВероятно вы отправили некорректные данные.\n        `);\n      } else if (error.request.status === 403) {\n        alert(`Для Вас это действие запрещено!`)\n      } else if (error.request.status === 404) {\n        alert(`Данные не найдены. Подождите. Не кликайте много раз подряд. \n        \\nВозможно мы ещё не обработали запрос`)\n      } else if (error.request.status === 400) {\n        alert(`Сервер не принял Ваши данные. Данные должны быть уникальны. \n        \\nПоля должны быть заполнены правильно. Попробуйте ввести что-то другое\n        `)\n      }\n    } else {\n      alert(`Ошибка - ${error}`);\n    }\n  }\n\n  /**\n   * Получить уведомление\n   * @returns {string|Notification|*}\n   */\n  getNotification() {\n    return this.state.notification\n  }\n\n  /**\n   * Установка уведомления\n   * @param text {string} Текст уведомления\n   */\n  setNotification(text) {\n    this.setState({\n      \"notification\": text\n    })\n  }\n\n  /**\n   * Отображение каркаса приложения. Маршрутизация для дочерних компонентов\n   * @returns {JSX.Element}\n   */\n  render() {\n    const {\n      roles, users, projects, todos, login, admin, domain, swaggerEndpoint,\n      swaggerJsonEndpoint, swaggerYamlEndpoint, reDocEndpoint, RESTAPIEndpoint,\n      graphQLEndpoint, tokenEndpoint, tokenRefreshEndpoint, adminEndpoint,\n      asyncioAiohttpEndpoint, limit, offset, uploadImagesEndpoint,\n      imageResizeEndpoint\n    } = this.state;\n\n    return (\n      <BrowserRouter>\n        <div className=\"content\">\n          <Header\n            isAuthenticated={() => this.isAuthenticated()}\n            logout={() => this.logout()}\n            login={login}\n            users={users}\n          />\n          <div className=\"main-content\">\n            <Routes>\n              <Route\n                exact path=\"/users\"\n                element={<Users users={users} roles={roles}/>}\n              />\n              <Route\n                exact\n                path=\"/users/:id\"\n                element={\n                  <UserPage\n                    roles={roles}\n                    users={users}\n                    projects={projects}\n                    todos={todos}\n                    login={login}\n                    isAuthenticated={() => this.isAuthenticated()}\n                    createTodo={(project, user, text) =>\n                      this.createTodo(project, user, text)\n                    }\n                    deleteTodo={id => this.deleteTodo(id)}\n                    createProject={(name, repository, users) =>\n                      this.createProject(name, repository, users)\n                    }\n                    deleteProject={(id => this.deleteProject(id))}\n                    editTodo={(data, id) => this.editTodo(data, id)}\n                    admin={admin}\n                    editProject={(data, id) => this.editProject(data, id)}\n                    editUser={(data, id) => this.editUser(data, id)}\n                    getNotification={() => this.getNotification()}\n                    setNotification={text => this.setNotification(text)}\n                  />\n                }\n              />\n              <Route\n                exact\n                path=\"/registration\"\n                element={\n                  <UserForm\n                    roles={roles}\n                    createUser={data => this.createUser(data)}\n                    getNotification={() => this.getNotification()}\n                    setNotification={text => this.setNotification(text)}\n                  />\n                }\n              />\n              <Route\n                exact\n                path=\"/projects\"\n                element={\n                  <Projects\n                    users={users}\n                    projects={projects}\n                    isAuthenticated={() => this.isAuthenticated()}\n                    login={login}\n                    deleteProject={(id => this.deleteProject(id))}\n                    admin={admin}\n                  />\n                }\n              />\n              <Route\n                exact\n                path=\"/projects/:id\"\n                element={\n                  <ProjectPage\n                    users={users}\n                    isAuthenticated={() => this.isAuthenticated()}\n                    login={login}\n                    projects={projects}\n                    todos={todos}\n                    createTodo={(project, user, text) =>\n                      this.createTodo(project, user, text)\n                    }\n                    deleteTodo={(id) => this.deleteTodo(id)}\n                    deleteProject={(id => this.deleteProject(id))}\n                    editTodo={(data, id) => this.editTodo(data, id)}\n                    admin={admin}\n                    editProject={(data, id) => this.editProject(data, id)}\n                  />\n                }\n              />\n              <Route\n                exact path=\"/todos\"\n                element={\n                  <Todos\n                    users={users}\n                    projects={projects}\n                    todos={todos}\n                    isAuthenticated={() => this.isAuthenticated()}\n                    deleteTodo={id => this.deleteTodo(id)}\n                    login={login}\n                    admin={admin}\n                  />\n                }\n              />\n              <Route\n                exact\n                path=\"/login\"\n                element={\n                  <LoginForm\n                    auth={(login, password) => this.auth(login, password)}\n                  />\n                }\n              />\n              <Route\n                exact\n                path=\"asyncio-aiohttp\"\n                element={\n                  <AsyncioAiohttp\n                    domain={domain}\n                    asyncioAiohttpEndpoint={asyncioAiohttpEndpoint}\n                    limit={limit}\n                    offset={offset}\n                    getHeaders={() => this.getHeaders()}\n                    handleErrors={\n                      (error, text) => this.handleErrors(error, text)\n                    }\n                  />\n                }\n              />\n              <Route\n                exact\n                path=\"upload-images\"\n                element={\n                  <UploadImages\n                    domain={domain}\n                    uploadImagesEndpoint={uploadImagesEndpoint}\n                    limit={limit}\n                    offset={offset}\n                    getHeaders={() => this.getHeaders()}\n                    handleErrors={\n                      (error, text) => this.handleErrors(error, text)\n                    }\n                    isAuthenticated={() => this.isAuthenticated()}\n                    imageResizeEndpoint={imageResizeEndpoint}\n                  />\n                }\n              />\n\n              <Route exact path=\"/\" element={<Navigate to=\"/todos\"/>}/>\n              <Route path=\"*\" element={<NotFound404/>}/>\n            </Routes>\n          </div>\n          <Footer\n            domain={domain}\n            swaggerEndpoint={swaggerEndpoint}\n            swaggerJsonEndpoint={swaggerJsonEndpoint}\n            swaggerYamlEndpoint={swaggerYamlEndpoint}\n            reDocEndpoint={reDocEndpoint}\n            RESTAPIEndpoint={RESTAPIEndpoint}\n            graphQLEndpoint={graphQLEndpoint}\n            tokenEndpoint={tokenEndpoint}\n            tokenRefreshEndpoint={tokenRefreshEndpoint}\n            adminEndpoint={adminEndpoint}\n          />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n","/**\n * Корень. Подключение глобальных стилей и скриптов для всего проекта\n */\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/global.css\";\n\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport {GeneralApp} from \"./GeneralApp\";\n\n\n/**\n * Корень развёртывания приложения. Подключение главного компонента\n * к элементу найденному по id root\n */\nReactDOM.render(\n  <React.StrictMode>\n    <GeneralApp/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}